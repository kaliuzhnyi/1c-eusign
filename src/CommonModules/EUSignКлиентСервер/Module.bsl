
#Область ПрограммныйИнтерфейс

#Область РаботаСОбъектомБиблиотеки

// Метод получение инициализированного объекта криптографической библиотеки 
//
// Возвращаемое значение:
//  COMОбъект - объект библиотеки полученный с помощью метода ОбъектБиблиотеки()
//
Функция ПолучитьОбъектБиблиотеки() Экспорт

	Библиотека = ОбъектБиблиотеки();
	УстановитьКодированиеСтрок(Библиотека);
	ИнициализироватьБиблиотеку(Библиотека);
	
	Возврат Библиотека;
	
КонецФункции

// Получение объекта криптографической библиотеки 
//
// Возвращаемое значение:
//  COMОбъект - объект библиотеки полученный с помощью метода
//
Функция ОбъектБиблиотеки() Экспорт

	Попытка
		Библиотека = Новый COMОбъект("IIT.EU1S.Library");
	Исключение
		ВызватьИсключение СформироватьТекстИсключения(НСтр("ru = 'Не удалось инициализировать криптографическую библиотеку';
			|uk = 'Не вдалося ініціалізувати криптографічну бібліотеку'"));	
	КонецПопытки;
	
	Возврат Библиотека;

КонецФункции

// Метод инициализации криптографической библиотеки
//
// Параметры:
//  Библиотека - COMОбъект - объект библиотеки полученный с помощью метода ОбъектБиблиотеки()
//
// Возвращаемое значение:
//  Неопределено - 
//
Функция ИнициализироватьБиблиотеку(Библиотека) Экспорт

	РазделРеестра = EUSignКлиентСерверПовтИсп.РазделРеестра().DEFAULT.Значение;
	КлючРеестра = "";
	
	// Оказывает влияние на:
	// - при чтении ключа (метод - ReadPrivateKeyBinary) криптографическая библиотека сама находит "пути"
	//   и скачивает сертификаты ключа с серверов TSP, OCSP, CMP и не задает "глупых" вопросов
	//   по типу: "Виникла помилка при пошуку власного сертифіката. Опис помилка: Сертифікат не знайдено"
	//   Для избежания этих проблем и графический режим должен быть выключен.
	ГрафическийРежим = EUSignКлиентСерверПовтИсп.ГрафическийРежим().ВЫКЛЮЧЕНО.Значение;
	
	Библиотека.Initialize(РазделРеестра, КлючРеестра, ГрафическийРежим);	

КонецФункции

// Метод завершения работы с криптографической библиотекой 
//
// Параметры:
//  Библиотека - COMОбъект - объект библиотеки полученный с помощью метода ОбъектБиблиотеки()
//
// Возвращаемое значение:
//  Неопределено - 
//
Функция ЗавершитьРаботуБиблиотеки(Библиотека) Экспорт
	
	Библиотека.Finalize();
	//Библиотека = Неопределено;

КонецФункции

// Метод получения информации о версии криптографической библиотеки  
//
// Параметры:
//  Библиотека - COMОбъект - объект библиотеки полученный с помощью метода ОбъектБиблиотеки()
//
// Возвращаемое значение:
//  Строка - версия криптографической библиотеки
//
Функция ВерсияБиблиотеки(Библиотека) Экспорт

	Возврат Библиотека.GetVersion();	

КонецФункции

// Метод получения информации о последней ошибке в криптографической библиотеке 
//
// Параметры:
//  Библиотека - COMОбъект - объект библиотеки полученный с помощью метода ОбъектБиблиотеки()
//
// Возвращаемое значение:
//  Строка - описание ошибки из криптографической библиотеки
//
Функция ПоследняяОшибкаБиблиотеки(Библиотека) Экспорт

	Возврат Библиотека.GetLastErrorDescription();

КонецФункции

// Метод установки кодировки срок 
//
// Параметры:
//  Библиотека - COMОбъект - объект библиотеки полученный с помощью метода ОбъектБиблиотеки()
//
// Возвращаемое значение:
//  Неопределено - 
//
Функция УстановитьКодированиеСтрок(Библиотека) Экспорт

	// 1251 - Кодування CP-1251
	// 65001 - Кодування UTF-8

	Библиотека.SetCodePage(65001);

КонецФункции

#КонецОбласти

#Область РаботаСНастройками

// Метод получения признаком необходимости установки параметров 
//
// Параметры:
//  Библиотека - COMОбъект - объект библиотеки полученный с помощью метода ОбъектБиблиотеки()
//
// Возвращаемое значение:
//  Булево - признак этого необходимо установить параметры
//
Функция НужноУстановитьНастройки(Библиотека) Экспорт

	Возврат Библиотека.DoesNeedSetSettings();

КонецФункции


// Метод установки параметров взаимодействия с серверами АЦСК 
//
// Параметры:
//  Библиотека - COMОбъект - объект библиотеки полученный с помощью метода ОбъектБиблиотеки()
//  РежимВзаимодействия - Булево, ПрограммноеПеречисление - если Истина - online, если Ложь - offline,
//    или значение программного перечисления см. EUSignКлиентСерверПовтИсп.РежимВзаимодействияАЦСК();
//
// Возвращаемое значение:
//  Неопределено - 
//
Функция УстановитьРежимВзаимодействияАЦСК(Библиотека, Знач РежимВзаимодействия = Истина) Экспорт

	Если EUSignСлужебныйКлиентСервер.ЭтоЗначениеПрограммногоПеречисления(РежимВзаимодействия) Тогда
		ЗначениеДляУстановки = РежимВзаимодействия.Значение;
	Иначе
		ЗначениеДляУстановки = Не РежимВзаимодействия; // ВключитьОфлайнРежим
	КонецЕсли;
	
	Библиотека.SetModeSettings(ЗначениеДляУстановки);	

КонецФункции

// Метод получения параметров взаимодействия с серверами АЦСК 
//
// Параметры:
//  Библиотека - COMОбъект - объект библиотеки полученный с помощью метода ОбъектБиблиотеки()
//
// Возвращаемое значение:
//  Булево - если Истина - online, если Ложь - offline;
//
Функция ПолучитьРежимВзаимодействияАЦСК(Библиотека) Экспорт

	ВключитьОфлайнРежим = Библиотека.GetModeSettings();
	Возврат ВключитьОфлайнРежим;

КонецФункции


// Метод установки параметров файлового хранилища сертифкатов
// Метод оболочка над методам УстановитьПараметрыФайловогоХранилища()
//
// Параметры:
//  Библиотека - COMОбъект - объект библиотеки полученный с помощью метода ОбъектБиблиотеки();
//  ОписаниеПараметров - Структура - структура параметров, см. ОписаниеПараметровФайловогоХранилища()
//
// Возвращаемое значение:
//  Неопределено - 
//
Функция УстановитьСтруктуруПараметровФайловогоХранилища(Библиотека, Знач ОписаниеПараметров = Неопределено) Экспорт

	ОписаниеПараметров = ОписаниеПараметровФайловогоХранилища(ОписаниеПараметров);
	
	Возврат УстановитьПараметрыФайловогоХранилища(Библиотека,
		ОписаниеПараметров.КаталогХранилища,
		ОписаниеПараметров.АвтоматическиПеречитыватьПриИзмененииВФайловомХранилище,
		ОписаниеПараметров.АвтоматическиСохранятьСертификатыВФайловоеХранилище,
		ОписаниеПараметров.ВремяХраненияСостоянияПроверенногоСертификата,
		ОписаниеПараметров.ПроверятьСписокОтозванныхСертификатов,
		ОписаниеПараметров.ПроверятьСписокОтозванныхСертификатовТолькоСвоегоЦСК,
		ОписаниеПараметров.ПроверятьСписокОтозванныхСертификатовПолныйИЧастичный,
		ОписаниеПараметров.АвтоматическиЗагружатьСписокОтозванныхСертификатов);

КонецФункции

// Метод формирования структуры параметров(по умолчанию) файлового хранилища сертификатов 
// Описание и назначение параметров см. УстановитьПараметрыФайловогоХранилища()
//
// Параметры:
//  ПараметрыДляЗамены - Структура - параметры которые устанавливаються вместо параметров по умолчанию;
//
// Возвращаемое значение:
//  Структура - структура параметров файлового хранилища
//
Функция ОписаниеПараметровФайловогоХранилища(Знач ПараметрыДляЗамены = Неопределено,
	Знач ПрефиксПараметровДляЗамены = "") Экспорт

	ОписаниеПараметров = Новый Структура;
	ОписаниеПараметров.Вставить("КаталогХранилища", "C:\EUSign\Cert");
	ОписаниеПараметров.Вставить("АвтоматическиПеречитыватьПриИзмененииВФайловомХранилище", Истина);
	ОписаниеПараметров.Вставить("АвтоматическиСохранятьСертификатыВФайловоеХранилище", Истина);
	ОписаниеПараметров.Вставить("ВремяХраненияСостоянияПроверенногоСертификата", 86400);
	ОписаниеПараметров.Вставить("ПроверятьСписокОтозванныхСертификатов", Ложь);
	ОписаниеПараметров.Вставить("ПроверятьСписокОтозванныхСертификатовТолькоСвоегоЦСК", Ложь);
	ОписаниеПараметров.Вставить("ПроверятьСписокОтозванныхСертификатовПолныйИЧастичный", Ложь);
	ОписаниеПараметров.Вставить("АвтоматическиЗагружатьСписокОтозванныхСертификатов", Ложь);
	
	Возврат ПереопределитьЗначенияПараметров(ОписаниеПараметров, ПараметрыДляЗамены, ПрефиксПараметровДляЗамены);	

КонецФункции

// Метод установки параметров файлового хранилища сертифкатов 
//
// Параметры:
//  Библиотека - COMОбъект - объект библиотеки полученный с помощью метода ОбъектБиблиотеки();
//  КаталогХранилища - Строка - путь к каталогу, в котором размещаются сертификаты и СОС;
//  АвтоматическиПеречитыватьПриИзмененииВФайловомХранилище - Булево - признак необходимости использования СОС только собственного;
//  АвтоматическиСохранятьСертификатыВФайловоеХранилище - Булево - признак необходимости автоматического сохранения сертификатов полученных из LDAP-сервера или протокола OCSP в файловое хранилище;
//  ВремяХраненияСостоянияПроверенногоСертификата - Число - время хранения состояния проверенного сертификата (в секундах);
//  ПроверятьСписокОтозванныхСертификатов - Булево - признак необходимости использования СВС при определении статуса сертификата;
//  ПроверятьСписокОтозванныхСертификатовТолькоСвоегоЦСК - Булево - признак необходимости использования СВС только собственного ЦСК пользователя;
//  ПроверятьСписокОтозванныхСертификатовПолныйИЧастичный - Булево - признак необходимости проверки наличия двух действующих СОС – полного и частичного;
//  АвтоматическиЗагружатьСписокОтозванныхСертификатов - Булево - признак необходимости автоматической загрузки СОС;
//
// Возвращаемое значение:
//  Неопределено - 
//
Функция УстановитьПараметрыФайловогоХранилища(Библиотека,
		Знач КаталогХранилища,
		Знач АвтоматическиПеречитыватьПриИзмененииВФайловомХранилище,
		Знач АвтоматическиСохранятьСертификатыВФайловоеХранилище,
		Знач ВремяХраненияСостоянияПроверенногоСертификата,
		Знач ПроверятьСписокОтозванныхСертификатов,
		Знач ПроверятьСписокОтозванныхСертификатовТолькоСвоегоЦСК,
		Знач ПроверятьСписокОтозванныхСертификатовПолныйИЧастичный,
		Знач АвтоматическиЗагружатьСписокОтозванныхСертификатов) Экспорт
		
	Библиотека.SetFileStoreSettings(КаталогХранилища,
		ПроверятьСписокОтозванныхСертификатов,
		АвтоматическиПеречитыватьПриИзмененииВФайловомХранилище,
		ПроверятьСписокОтозванныхСертификатовТолькоСвоегоЦСК,
		ПроверятьСписокОтозванныхСертификатовПолныйИЧастичный,
		АвтоматическиЗагружатьСписокОтозванныхСертификатов,
		АвтоматическиСохранятьСертификатыВФайловоеХранилище,
		ВремяХраненияСостоянияПроверенногоСертификата);	

КонецФункции


// Метод установки параметров Proxy-сервера
// Метод оболочка над методам УстановитьПараметрыProxy()
//
// Параметры:
//  Библиотека - COMОбъект - объект библиотеки полученный с помощью метода ОбъектБиблиотеки();
//  ОписаниеПараметров - Структура - структура параметров, см. ОписаниеПараметровProxy()
//
// Возвращаемое значение:
//  Неопределено - 
//
Функция УстановитьСтруктуруПараметровProxy(Библиотека, Знач ОписаниеПараметров = Неопределено) Экспорт

	ОписаниеПараметров = ОписаниеПараметровProxy(ОписаниеПараметров);
	
	Возврат УстановитьПараметрыProxy(Библиотека,
		ОписаниеПараметров.Использовать,
		ОписаниеПараметров.АдресСервера,
		ОписаниеПараметров.Порт,
		ОписаниеПараметров.Анонимный,
		ОписаниеПараметров.Пользователь,
		ОписаниеПараметров.Пароль,
		ОписаниеПараметров.СохранитьПароль);

КонецФункции

// Метод формирования структуры параметров(по умолчанию) Proxy-сервера 
// Описание и назначение параметров см. УстановитьПараметрыProxy()
//
// Параметры:
//  ПараметрыДляЗамены - Структура - параметры которые устанавливаються вместо параметров по умолчанию;
//
// Возвращаемое значение:
//  Структура - структура параметров Proxy-сервера
//
Функция ОписаниеПараметровProxy(Знач ПараметрыДляЗамены = Неопределено,
	Знач ПрефиксПараметровДляЗамены = "") Экспорт

	ОписаниеПараметров = Новый Структура;
	ОписаниеПараметров.Вставить("Использовать", Ложь);
	ОписаниеПараметров.Вставить("АдресСервера", "");
	ОписаниеПараметров.Вставить("Порт", 0);
	ОписаниеПараметров.Вставить("Анонимный", Истина);
	ОписаниеПараметров.Вставить("Пользователь", "");
	ОписаниеПараметров.Вставить("Пароль", "");
	ОписаниеПараметров.Вставить("СохранитьПароль", Ложь);
	
	Возврат ПереопределитьЗначенияПараметров(ОписаниеПараметров, ПараметрыДляЗамены, ПрефиксПараметровДляЗамены);	

КонецФункции

// Метод установки параметров Proxy-сервера 
//
// Параметры:
//  Библиотека - COMОбъект - объект библиотеки полученный с помощью метода ОбъектБиблиотеки();
//  Использовать - Булево - признак необходимости подключения к ЦСК через Proxy-сервер;
//  АдресСервера - Строка - IP-адрес или DNS-имя Proxy-сервера;
//  Порт - Число - TCP-порт Proxy-сервера;
//  Анонимный - Булево - признак анонимного Proxy-сервера;
//  Пользователь - Строка - имя пользователя Proxy-сервера
//  Пароль - Строка - пароль доступа пользователя к Proxy-серверу
//  СохранитьПароль - Булево - признак хранения пароля доступа к Proxy-серверу
//
// Возвращаемое значение:
//  Неопределено - 
//
Функция УстановитьПараметрыProxy(Библиотека,
		Знач Использовать = Ложь,
		Знач АдресСервера = "",
		Знач Порт = 0,
		Знач Анонимный = Истина,
		Знач Пользователь = "",
		Знач Пароль = "",
		Знач СохранитьПароль = Ложь) Экспорт

	Библиотека.SetProxySettings(Использовать,
		Анонимный,
		АдресСервера,
		Порт,
		Пользователь,
		Пароль,
		СохранитьПароль);	

КонецФункции


// Метод установки параметров TSP-сервера
// Метод оболочка над методам УстановитьПараметрыTSP()
//
// Параметры:
//  Библиотека - COMОбъект - объект библиотеки полученный с помощью метода ОбъектБиблиотеки();
//  ОписаниеПараметров - Структура - структура параметров, см. ОписаниеПараметровTSP()
//
// Возвращаемое значение:
//  Неопределено - 
//
Функция УстановитьСтруктуруПараметровTSP(Библиотека, Знач ОписаниеПараметров = Неопределено) Экспорт

	ОписаниеПараметров = ОписаниеПараметровTSP(ОписаниеПараметров);
	
	Возврат УстановитьПараметрыTSP(Библиотека,
		ОписаниеПараметров.Использовать,
		ОписаниеПараметров.АдресСервера,
		ОписаниеПараметров.Порт);

КонецФункции

// Метод формирования структуры параметров(по умолчанию) Proxy-сервера 
// Описание и назначение параметров см. УстановитьПараметрыProxy()
//
// Параметры:
//  ПараметрыДляЗамены - Структура - параметры которые устанавливаються вместо параметров по умолчанию;
//
// Возвращаемое значение:
//  Структура - структура параметров TSP-сервера
//
Функция ОписаниеПараметровTSP(Знач ПараметрыДляЗамены = Неопределено,
	Знач ПрефиксПараметровДляЗамены = "") Экспорт

	ОписаниеПараметров = Новый Структура;
	ОписаниеПараметров.Вставить("Использовать", Ложь);
	ОписаниеПараметров.Вставить("АдресСервера", "");
	ОписаниеПараметров.Вставить("Порт", 0);
	
	Возврат ПереопределитьЗначенияПараметров(ОписаниеПараметров, ПараметрыДляЗамены, ПрефиксПараметровДляЗамены);	

КонецФункции

// Метод установки параметров TSP-сервера 
//
// Параметры:
//  Библиотека - COMОбъект - объект библиотеки полученный с помощью метода ОбъектБиблиотеки();
//  Использовать - Булево - признак необходимости получать отметки времени при формировании подписи;
//  АдресСервера - Строка - IP-адрес или DNS-имя TSP-сервера;
//  Порт - Число - TCP-порт TSP-сервера;
//
// Возвращаемое значение:
//  Неопределено - 
//
Функция УстановитьПараметрыTSP(Библиотека,
		Знач Использовать = Ложь,
		Знач АдресСервера = "",
		Знач Порт = 0) Экспорт

	Библиотека.SetTSPSettings(Использовать,
		АдресСервера,
		Порт);

КонецФункции


// Метод установки параметров OCSP-сервера
// Метод оболочка над методам УстановитьПараметрыOCSP()
//
// Параметры:
//  Библиотека - COMОбъект - объект библиотеки полученный с помощью метода ОбъектБиблиотеки();
//  ОписаниеПараметров - Структура - структура параметров, см. ОписаниеПараметровOCSP()
//
// Возвращаемое значение:
//  Неопределено - 
//
Функция УстановитьСтруктуруПараметровOCSP(Библиотека, Знач ОписаниеПараметров = Неопределено) Экспорт

	ОписаниеПараметров = ОписаниеПараметровOCSP(ОписаниеПараметров);
	
	Возврат УстановитьПараметрыOCSP(Библиотека,
		ОписаниеПараметров.Использовать,
		ОписаниеПараметров.АдресСервера,
		ОписаниеПараметров.Порт,
		ОписаниеПараметров.ПроверятьПередПроверкойВХранилище);

КонецФункции

// Метод формирования структуры параметров(по умолчанию) OCSP-сервера 
// Описание и назначение параметров см. УстановитьПараметрыOCSP()
//
// Параметры:
//  ПараметрыДляЗамены - Структура - параметры которые устанавливаються вместо параметров по умолчанию;
//
// Возвращаемое значение:
//  Структура - структура параметров OCSP-сервера
//
Функция ОписаниеПараметровOCSP(Знач ПараметрыДляЗамены = Неопределено,
	Знач ПрефиксПараметровДляЗамены = "") Экспорт

	ОписаниеПараметров = Новый Структура;
	ОписаниеПараметров.Вставить("Использовать", Ложь);
	ОписаниеПараметров.Вставить("АдресСервера", "");
	ОписаниеПараметров.Вставить("Порт", 0);
	ОписаниеПараметров.Вставить("ПроверятьПередПроверкойВХранилище", Ложь);
	
	Возврат ПереопределитьЗначенияПараметров(ОписаниеПараметров, ПараметрыДляЗамены, ПрефиксПараметровДляЗамены);	

КонецФункции

// Метод установки параметров OCSP-сервера 
//
// Параметры:
//  Библиотека - COMОбъект - объект библиотеки полученный с помощью метода ОбъектБиблиотеки();
//  Использовать - Булево - признак необходимости использования механизма определения статуса сертификатов с помощью протокола OCSP;
//  АдресСервера - Строка - IP-адрес или DNS-имя OCSP-сервера;
//  Порт - Число - TCP-порт OCSP-сервера;
//  ПроверятьПередПроверкойВХранилище - Булево - признак очередности проверки статуса сертификата;
//
// Возвращаемое значение:
//  Неопределено - 
//
Функция УстановитьПараметрыOCSP(Библиотека,
		Знач Использовать = Ложь,
		Знач АдресСервера = "",
		Знач Порт = 0,
		Знач ПроверятьПередПроверкойВХранилище = Ложь) Экспорт
		
	Библиотека.SetOCSPSettings(Использовать,
		ПроверятьПередПроверкойВХранилище,
		АдресСервера,
		Порт);	

КонецФункции


// Метод установки параметров LDAP-сервера
// Метод оболочка над методам УстановитьПараметрыLDAP()
//
// Параметры:
//  Библиотека - COMОбъект - объект библиотеки полученный с помощью метода ОбъектБиблиотеки();
//  ОписаниеПараметров - Структура - структура параметров, см. ОписаниеПараметровLDAP()
//
// Возвращаемое значение:
//  Неопределено - 
//
Функция УстановитьСтруктуруПараметровLDAP(Библиотека, Знач ОписаниеПараметров = Неопределено) Экспорт

	ОписаниеПараметров = ОписаниеПараметровLDAP(ОписаниеПараметров);
	
	Возврат УстановитьПараметрыLDAP(Библиотека,
		ОписаниеПараметров.Использовать,
		ОписаниеПараметров.АдресСервера,
		ОписаниеПараметров.Порт,
		ОписаниеПараметров.Анонимный,
		ОписаниеПараметров.Пользователь,
		ОписаниеПараметров.Пароль);

КонецФункции

// Метод формирования структуры параметров(по умолчанию) LDAP-сервера 
// Описание и назначение параметров см. УстановитьПараметрыLDAP()
//
// Параметры:
//  ПараметрыДляЗамены - Структура - параметры которые устанавливаються вместо параметров по умолчанию;
//
// Возвращаемое значение:
//  Структура - структура параметров LDAP-сервера
//
Функция ОписаниеПараметровLDAP(Знач ПараметрыДляЗамены = Неопределено,
	Знач ПрефиксПараметровДляЗамены = "") Экспорт

	ОписаниеПараметров = Новый Структура;
	ОписаниеПараметров.Вставить("Использовать", Ложь);
	ОписаниеПараметров.Вставить("АдресСервера", "");
	ОписаниеПараметров.Вставить("Порт", 0);
	ОписаниеПараметров.Вставить("Анонимный", Истина);
	ОписаниеПараметров.Вставить("Пользователь", "");
	ОписаниеПараметров.Вставить("Пароль", "");
	
	Возврат ПереопределитьЗначенияПараметров(ОписаниеПараметров, ПараметрыДляЗамены, ПрефиксПараметровДляЗамены);

КонецФункции

// Метод установки параметров LDAP-сервера 
//
// Параметры:
//  Библиотека - COMОбъект - объект библиотеки полученный с помощью метода ОбъектБиблиотеки();
//  Использовать - Булево - признак необходимости использования LDAP-сервера;
//  АдресСервера - Строка - IP-адрес или DNS-имя LDAP-сервера;
//  Порт - Число - TCP-порт LDAP-сервера;
//  Анонимный - Булево - признак анонимного доступа к LDAP-серверу;
//  Пользователь - Строка - имя пользователя LDAP-сервера
//  Пароль - Строка - пароль доступа пользователя к LDAP-серверу
//
// Возвращаемое значение:
//  Неопределено - 
//
Функция УстановитьПараметрыLDAP(Библиотека,
		Знач Использовать = Ложь,
		Знач АдресСервера = "",
		Знач Порт = 0,
		Знач Анонимный = Истина,
		Знач Пользователь = "",
		Знач Пароль = "") Экспорт
		
	Библиотека.SetLDAPSettings(Использовать,
		АдресСервера,
		Порт,
		Анонимный,
		Пользователь,
		Пароль);	

КонецФункции


// Метод установки параметров CMP-сервера
// Метод оболочка над методам УстановитьПараметрыCMP()
//
// Параметры:
//  Библиотека - COMОбъект - объект библиотеки полученный с помощью метода ОбъектБиблиотеки();
//  ОписаниеПараметров - Структура - структура параметров, см. ОписаниеПараметровCMP()
//
// Возвращаемое значение:
//  Неопределено - 
//
Функция УстановитьСтруктуруПараметровCMP(Библиотека, Знач ОписаниеПараметров = Неопределено) Экспорт

	ОписаниеПараметров = ОписаниеПараметровCMP(ОписаниеПараметров);
	
	Возврат УстановитьПараметрыCMP(Библиотека,
		ОписаниеПараметров.Использовать,
		ОписаниеПараметров.АдресСервера,
		ОписаниеПараметров.Порт,
		ОписаниеПараметров.РеквизитСертификатаНаименованиеОрганизации);

КонецФункции

// Метод формирования структуры параметров(по умолчанию) CMP-сервера 
// Описание и назначение параметров см. УстановитьПараметрыCMP()
//
// Параметры:
//  ПараметрыДляЗамены - Структура - параметры которые устанавливаються вместо параметров по умолчанию;
//
// Возвращаемое значение:
//  Структура - структура параметров CMP-сервера
//
Функция ОписаниеПараметровCMP(Знач ПараметрыДляЗамены = Неопределено,
	Знач ПрефиксПараметровДляЗамены = "") Экспорт

	ОписаниеПараметров = Новый Структура;
	ОписаниеПараметров.Вставить("Использовать", Ложь);
	ОписаниеПараметров.Вставить("АдресСервера", "");
	ОписаниеПараметров.Вставить("Порт", 0);
	ОписаниеПараметров.Вставить("РеквизитСертификатаНаименованиеОрганизации", "commonName");
	
	Возврат ПереопределитьЗначенияПараметров(ОписаниеПараметров, ПараметрыДляЗамены, ПрефиксПараметровДляЗамены);	

КонецФункции

// Метод установки параметров CMP-сервера 
//
// Параметры:
//  Библиотека - COMОбъект - объект библиотеки полученный с помощью метода ОбъектБиблиотеки();
//  Использовать - Булево - признак необходимости использования CMP-сервера;
//  АдресСервера - Строка - IP-адрес или DNS-имя CMP-сервера;
//  Порт - Число - TCP-порт CMP-сервера;
//  РеквизитСертификатаНаименованиеОрганизации - Строка - реквизит сертификата "полное наименование организации" ("commonName");
//
// Возвращаемое значение:
//  Неопределено - 
//
Функция УстановитьПараметрыCMP(Библиотека,
		Знач Использовать = Ложь,
		Знач АдресСервера = "",
		Знач Порт = 0,
		Знач РеквизитСертификатаНаименованиеОрганизации = "commonName") Экспорт
		
	Библиотека.SetCMPSettings(Использовать,
		АдресСервера,
		Порт,
		РеквизитСертификатаНаименованиеОрганизации);	

КонецФункции

#КонецОбласти

#Область РаботаСКлючом

// Чтение ключа и установка его в криптографическую библиотеку
// Метод оболочка над методами:
// ПрочитатьКлючИзФайла(),
// ПрочитатьКлючИзДвоичныхДанных(),
// ПрочитатьКлючИзСтрокиBase64()
//
// Параметры:
//  Библиотека - COMОбъект - объект библиотеки полученный с помощью метода ПолучитьОбъектБиблиотеки()
//  Ключ - Строка, ДвоичныеДанные - путь к файлу ключа или двоичные данные ключа, или данные ключа в формате base64
//  Пароль - Строка - пароль ключа
//
// Возвращаемое значение:
//  Строка - идентифкатор сертификата ключа
//
Функция ПрочитатьКлючИз(Библиотека, Знач Ключ, Знач Пароль) Экспорт

	ТипЗначенияПараметраКлюч = ТипЗнч(Ключ);
	Если ТипЗначенияПараметраКлюч = Тип("Строка") Тогда
		Если СтрНайти(Ключ, ".") > 0 Тогда
			Возврат ПрочитатьКлючИзФайла(Библиотека, Ключ, Пароль);
		Иначе
			Возврат ПрочитатьКлючИзСтрокиBase64(Библиотека, Ключ, Пароль);	
		КонецЕсли;	
	ИначеЕсли ТипЗначенияПараметраКлюч = Тип("ДвоичныеДанные") Тогда
		Возврат ПрочитатьКлючИзДвоичныхДанных(Библиотека, Ключ, Пароль);	
	КонецЕсли;

КонецФункции

// Чтение ключа и установка его в криптографическую библиотеку 
//
// Параметры:
//  Библиотека - COMОбъект - объект библиотеки полученный с помощью метода ПолучитьОбъектБиблиотеки()
//  ПолноеИмяФайлаКлюча - Строка - путь к файлу ключа (в пути не должно быть пробелов!)
//  ПарольКлюча - Строка - пароль ключа
//
// Возвращаемое значение:
//  Строка - идентифкатор сертификата ключа
//
Функция ПрочитатьКлючИзФайла(Библиотека, Знач ПолноеИмяФайлаКлюча, Знач ПарольКлюча) Экспорт
	
	ИдентификаторСертификата = Библиотека.ReadPrivateKeyBinary(ПолноеИмяФайлаКлюча, ПарольКлюча);
	Возврат ИдентификаторСертификата;

КонецФункции

// Чтение ключа и установка его в криптографическую библиотеку 
//
// Параметры:
//  Библиотека - COMОбъект - объект библиотеки полученный с помощью метода ПолучитьОбъектБиблиотеки()
//  ДвоичныеДанные - ДвоичныеДанные - двоичные данные файла ключа
//  ПарольКлюча - Строка - пароль ключа
//
// Возвращаемое значение:
//  Строка - идентифкатор сертификата ключа
//
Функция ПрочитатьКлючИзДвоичныхДанных(Библиотека, Знач ДвоичныеДанные, Знач ПарольКлюча) Экспорт
	
	ИмяВременногоФайла = ДвоичныеДанныеВФайл(ДвоичныеДанные);
	ИдентификаторСертификата = ПрочитатьКлючИзФайла(Библиотека, ИмяВременногоФайла, ПарольКлюча);
	Возврат ИдентификаторСертификата;

КонецФункции

// Чтение ключа и установка его в криптографическую библиотеку 
//
// Параметры:
//  Библиотека - COMОбъект - объект библиотеки полученный с помощью метода ПолучитьОбъектБиблиотеки()
//  СтрокаBase64 - Строка - строка двоичных данных ключа в формате base64
//  ПарольКлюча - Строка - пароль ключа
//
// Возвращаемое значение:
//  Строка - идентифкатор сертификата ключа
//
Функция ПрочитатьКлючИзСтрокиBase64(Библиотека, Знач СтрокаBase64, Знач ПарольКлюча) Экспорт

	ДвоичныеДанные = СтрокуBase64ВДвоичныеДанные(СтрокаBase64);

	ИдентификаторСертификата = ПрочитатьКлючИзДвоичныхДанных(Библиотека, ДвоичныеДанные, ПарольКлюча);
	Возврат ИдентификаторСертификата;

КонецФункции

// Метод проверки наличия считанного личного ключа в памяти криптографической библиотеки 
//
// Параметры:
//  Библиотека - COMОбъект - объект библиотеки полученный с помощью метода ПолучитьОбъектБиблиотеки()
//
// Возвращаемое значение:
//  Булево - Истина если ключ прочитан и установлен в криптографической библиотеке, Ложь в противном случае
//
Функция КлючПрочитан(Библиотека) Экспорт

	Возврат Библиотека.IsPrivateKeyReaded();
		
КонецФункции

// Метод сброса/затирки личного ключа в памяти криптографической библиотеки 
//
// Параметры:
//  Библиотека - COMОбъект - объект библиотеки полученный с помощью метода ПолучитьОбъектБиблиотеки()
//
// Возвращаемое значение:
//  Неопределено - 
//
Функция СброситьКлюч(Библиотека) Экспорт

	Библиотека.ResetPrivateKey();	

КонецФункции

// Метод получения информации о владельце личного ключа 
//
// Параметры:
//  Библиотека - COMОбъект - объект библиотеки полученный с помощью метода ПолучитьОбъектБиблиотеки()
//
// Возвращаемое значение:
//  Неопределено, Структура - Структура если удалось получить информацию о владельце ключа, в противном случае Неопределено
//
Функция ИнформацияОВладельцеКлюча(Библиотека) Экспорт

	ИнформацияОВладельце = Новый Структура;
	
	// DNS
	ИнформацияОВладельце.Вставить("DNS", "GetDNS"); // Содержит информацию о DNS-имя или другом техническом средстве
	
	// АЦСК
	ИнформацияОВладельце.Вставить("АЦСКИдентификатор", "GetIssuerCertificateID"); // Содержит информацию об идентификаторе ЦСК, выпустившем сертификат
	ИнформацияОВладельце.Вставить("АЦСКРеквизиты", "GetIssuerCommonName"); // Содержит информацию о реквизитах ЦСК, выдавшего сертификат.
	
	// Сертификат
	ИнформацияОВладельце.Вставить("СертификатИдентификатор", "GetCertificateID"); // Содержит информацию об идентификаторе сертификата
	ИнформацияОВладельце.Вставить("СертификатСерийныйНомер", "GetCertificateSerial"); // Содержит информацию о серийном номере сертификата
	ИнформацияОВладельце.Вставить("СертификатОтпечаток", "GetThumbprint"); // Содержит информацию об отпечатке сертификата
	ИнформацияОВладельце.Вставить("СертификатДействителенС", "GetCertBeginTime"); // Время ввода сертификата в действие
	ИнформацияОВладельце.Вставить("СертификатДействителенДо", "GetCertEndTime"); // Дата окончания действия сертификата
	
	// Владелец сертификата/ключа
	ИнформацияОВладельце.Вставить("ВладелецСертификата", "GetCommonName"); // Содержит информацию о реквизитах владельца сертификата
	ИнформацияОВладельце.Вставить("ВладелецСертификатаИмя", "GetFullName"); // Содержит информацию о полном имени владельца сертификата
	ИнформацияОВладельце.Вставить("ВладельцСертификатаЕГРПОУ", "GetEDRPOUCode"); // Содержит информацию о ЕГРПОУ коде владельца сертификата
	ИнформацияОВладельце.Вставить("ВладелецСертификатаДРФО", "GetDRFOCode"); // Содержит информацию о ДРФЛ коде владельца сертификата
	ИнформацияОВладельце.Вставить("ВладелецСертификатаОрганизация", "GetOrganization"); // Содержит информацию об организации, к которой относится владелец сертификата
	ИнформацияОВладельце.Вставить("ВладелецСертификатаПодразделение", "GetOragizationalUnit"); // Содержит информацию о подразделении организации, к которой принадлежит владелец сертификата
	ИнформацияОВладельце.Вставить("ВладелецСертификатаДолжность", "GetTitle"); // Содержит информацию о должности владельца сертификата
	ИнформацияОВладельце.Вставить("ВладелецСертификатаГосударство", "GetState"); // Содержит информацию о государстве, к которому принадлежит владелец сертификата
	ИнформацияОВладельце.Вставить("ВладелецСертификатаНаселенныйПункт", "GetLocality"); // Содержит информацию о населенном пункте, к которому принадлежит владелец сертификата
	ИнформацияОВладельце.Вставить("ВладелецСертификатаАдрес", "GetAddress"); // Содержит информацию об адресе владельца сертификата
	ИнформацияОВладельце.Вставить("ВладелецСертификатаТелефон", "GetPhone"); // Содержит информацию о телефоне владельца сертификата
	ИнформацияОВладельце.Вставить("ВладелецСертификатаЭлектроннаяПочта", "GetEMail"); // Содержит информацию об адресе электронной почты владельца сертификата

	// Ключ
	ИнформацияОВладельце.Вставить("КлючНазначение", "GetCertExtKeyUsages"); // Уточненное назначение ключа
	ИнформацияОВладельце.Вставить("КлючДействителеС", "GetPrivKeyBeginTime"); // Время ввода в действие личного ключа
	ИнформацияОВладельце.Вставить("КлючДействителенДо", "GetPrivKeyEndTime"); // Время вывода из действия личного ключа

	ОбъектДоступаКИнформации = Библиотека.GetPrivateKeyOwnerInfo();
	Если ТипЗнч(ОбъектДоступаКИнформации) <> Тип("COMОбъект") Тогда
		Возврат Неопределено	
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из ИнформацияОВладельце Цикл
		Ключ = КлючИЗначение.Ключ;
		Команда = КлючИЗначение.Значение;
		Попытка
			ИнформацияОВладельце[Ключ] = Вычислить(СтрШаблон("ОбъектДоступаКИнформации.%1()", Команда));
		Исключение
			ИнформацияОВладельце[Ключ] = "";
		КонецПопытки;
	КонецЦикла;

	Возврат ИнформацияОВладельце;

КонецФункции

#КонецОбласти

#Область РаботаССертификатом

// Метод получения информации о владельце сертификата 
//
// Параметры:
//  Библиотека - COMОбъект - объект библиотеки полученный с помощью метода ПолучитьОбъектБиблиотеки()
//
// Возвращаемое значение:
//  Неопределено, Структура - Структура если удалось получить информацию о владельце сертификата, в противном случае Неопределено
//
Функция ИнформацияОВладельцеСертификата(Библиотека, Знач Сертификат) Экспорт

	ФайлСертификата = Неопределено;
	
	ТипЗначенияПараметраСертификат = ТипЗнч(Сертификат);
	Если ТипЗначенияПараметраСертификат = Тип("Строка") Тогда
		Если СтрНайти(Сертификат, ".") > 0 Тогда
			ФайлСертификата = Сертификат;
		Иначе
			ФайлСертификата = СтрокуBase64ВФайл(Сертификат);	
		КонецЕсли;
	ИначеЕсли ТипЗначенияПараметраСертификат = Тип("ДвоичныеДанные") Тогда
		ФайлСертификата = ДвоичныеДанныеВФайл(Сертификат);	
	Иначе
		Возврат Неопределено;
	КонецЕсли;


	ОбъектДоступаКИнформации = Библиотека.GetFileCertificateOwnerInfo(ФайлСертификата);
	Если ТипЗнч(ОбъектДоступаКИнформации) <> Тип("COMОбъект") Тогда
		Возврат Неопределено	
	КонецЕсли;
	
	ИнформацияОВладельце = EUSignКлиентСерверПовтИсп.СтруктураИнформацииОВладельцеСертификата();
	Для Каждого КлючИЗначение Из ИнформацияОВладельце Цикл
		Ключ = КлючИЗначение.Ключ;
		Команда = КлючИЗначение.Значение;
		Попытка
			ИнформацияОВладельце[Ключ] = Вычислить(СтрШаблон("ОбъектДоступаКИнформации.%1()", Команда));
		Исключение
			ИнформацияОВладельце[Ключ] = "";
		КонецПопытки;
	КонецЦикла;

	Возврат ИнформацияОВладельце;

КонецФункции

#КонецОбласти

#Область РаботаСПодписью

// Метод установки типа подписи в память криптографической библиотеки 
//
// Параметры:
//  Библиотека - COMОбъект - объект библиотеки полученный с помощью метода ПолучитьОбъектБиблиотеки();
//  ТипПодписи - Число, ПрограммноеПеречисление.ТипПодписи() - тип подписи файлов;
//
// Возвращаемое значение:
//  Неопределено -
//
Функция УстановитьТипПодписи(Библиотека, Знач ТипПодписи) Экспорт

	Если EUSignСлужебныйКлиентСервер.ЭтоЗначениеПрограммногоПеречисления(ТипПодписи) Тогда
		ТипПодписи = ТипПодписи.Значение;	
	КонецЕсли;

	Библиотека.SetSignType(ТипПодписи);

КонецФункции


// Метод подписи данных, внешней подписью, когда подпись отдельно от исходного файла. 
// Метод оболочка над методами:
// ПодписатьДанныеВнешнейПодписьюФайл(),
// ПодписатьДанныеВнешнейПодписьюДвоичныеДанные(),
// ПодписатьДанныеВнешнейПодписьюBase64()
//
// Параметры:
//  Библиотека - COMОбъект - объект библиотеки полученный с помощью метода ПолучитьОбъектБиблиотеки();
//  Данные - Строка, ДвоичныеДанные - путь к файлу с данными которые необходимо подписать (в пути не должно быть пробелов!)
//    или данные для подписи в виде ДвоичныеДанные,
//    или данные для подписи в виде строки в формате base64;
//
// Возвращаемое значение:
//  Строка, ДвоичныеДанные - в зависимости от того какой метод будет вызван,
//    см. описание методов ПодписатьДанныеВнешнейПодписьюФайл(), ПодписатьДанныеВнешнейПодписьюДвоичныеДанные(), ПодписатьДанныеВнешнейПодписьюBase64();
//
Функция ПодписатьДанныеВнешнейПодписью(Библиотека,
	Знач Данные,
	Знач ТипПодписи = Неопределено) Экспорт

	ТипЗначенияПараметраДанные = ТипЗнч(Данные);
	Если ТипЗначенияПараметраДанные = Тип("Строка") Тогда
		Если СтрНайти(Данные, ".") > 0 Тогда
			Возврат ПодписатьДанныеВнешнейПодписьюФайл(Библиотека, Данные, ТипПодписи);
		Иначе
			Возврат ПодписатьДанныеВнешнейПодписьюСтрокаBase64(Библиотека, Данные, ТипПодписи);	
		КонецЕсли;	
	ИначеЕсли ТипЗначенияПараметраДанные = Тип("ДвоичныеДанные") Тогда
		Возврат ПодписатьДанныеВнешнейПодписьюДвоичныеДанные(Библиотека, Данные, ТипПодписи);	
	КонецЕсли;		

КонецФункции

// Метод подписи данных, внешней подписью, когда подпись отдельно от исходного файла. 
//
// Параметры:
//  Библиотека - COMОбъект - объект библиотеки полученный с помощью метода ПолучитьОбъектБиблиотеки();
//  ПолноеИмяФайла - Строка - путь к файлу с данными которые необходимо подписать (в пути не должно быть пробелов!);
//
// Возвращаемое значение:
//  Строка - путь к файлу подпись на исходные данные.
//
Функция ПодписатьДанныеВнешнейПодписьюФайл(Библиотека,
	Знач ПолноеИмяФайла,
	Знач ТипПодписи = Неопределено) Экспорт

	Если ТипПодписи <> Неопределено Тогда
		УстановитьТипПодписи(Библиотека, ТипПодписи);		
	КонецЕсли;

	ДанныеПодписиСтрокаBase64 = Библиотека.SignFile(ПолноеИмяФайла);
	Возврат СтрокуBase64ВФайл(ДанныеПодписиСтрокаBase64,
		СформироватьПолноеИмяФайлаПодписанногоФайла(ПолноеИмяФайла,
			Истина,
			?(EUSignСлужебныйКлиентСервер.ЭтоЗначениеПрограммногоПеречисления(ТипПодписи), ТипПодписи, Неопределено)));
	
КонецФункции

// Метод подписи данных, внешней подписью, когда подпись отдельно от исходного файла. 
//
// Параметры:
//  Библиотека - COMОбъект - объект библиотеки полученный с помощью метода ПолучитьОбъектБиблиотеки();
//  ДвоичныеДанные - ДвоичныеДанные - данные для подписи в виде ДвоичныеДанные;
//
// Возвращаемое значение:
//  ДвоичныеДанные - подпись на исходные данные в виде ДвоичныеДанные.
//
Функция ПодписатьДанныеВнешнейПодписьюДвоичныеДанные(Библиотека,
	Знач ДвоичныеДанные,
	Знач ТипПодписи = Неопределено) Экспорт

	Если ТипПодписи <> Неопределено Тогда
		УстановитьТипПодписи(Библиотека, ТипПодписи);		
	КонецЕсли;
	
	СтрокаBase64 = ДвоичныеДанныеВСтрокуBase64(ДвоичныеДанные);
	ДанныеПодписиСтрокаBase64 = ПодписатьДанныеВнешнейПодписьюСтрокаBase64(Библиотека,
		СтрокаBase64);
	Возврат СтрокуBase64ВДвоичныеДанные(ДанныеПодписиСтрокаBase64);

КонецФункции

// Метод подписи данных, внешней подписью, когда подпись отдельно от исходного файла. 
//
// Параметры:
//  Библиотека - COMОбъект - объект библиотеки полученный с помощью метода ПолучитьОбъектБиблиотеки();
//  СтрокаBase64 - Строка - данные для подписи в виде строки в формате base64;
//
// Возвращаемое значение:
//  Строка - подпись на исходные данные в виде строки в формате base64.
//
Функция ПодписатьДанныеВнешнейПодписьюСтрокаBase64(Библиотека,
	Знач СтрокаBase64,
	Знач ТипПодписи = Неопределено) Экспорт

	Если ТипПодписи <> Неопределено Тогда
		УстановитьТипПодписи(Библиотека, ТипПодписи);		
	КонецЕсли;
	
	ДанныеПодписиСтрокаBase64 = Библиотека.SignData(СтрокаBase64);
	Возврат ДанныеПодписиСтрокаBase64;

КонецФункции


// Метод подписи данных, внутренней подписью, когда подпись и исходные данные вместе.
// Метод оболочка над методами:
// ПодписатьДанныеВнутреннейПодписьюФайл(),
// ПодписатьДанныеВнутреннейПодписьюДвоичныеДанные(),
// ПодписатьДанныеВнутреннейПодписьюСтрокаBase64()
//
// Параметры:
//  Библиотека - COMОбъект - объект библиотеки полученный с помощью метода ПолучитьОбъектБиблиотеки();
//  Данные - Строка, ДвоичныеДанные - путь к файлу с данными которые необходимо подписать (в пути не должно быть пробелов!)
//    или данные для подписи в виде ДвоичныеДанные,
//    или данные для подписи в виде строки в формате base64;
//  ВключатьСертификатПодписантаВоВнутреннююПодпись - Булево - признак необходимости включать сертификат подписанта
//    во внутренню подпись;
//
// Возвращаемое значение:
//  Строка, ДвоичныеДанные - в зависимости от того какой метод будет вызван,
//    см. описание методов ПодписатьДанныеВнутреннейПодписьюФайл(), ПодписатьДанныеВнутреннейПодписьюДвоичныеДанные(), ПодписатьДанныеВнутреннейПодписьюСтрокаBase64();
//
Функция ПодписатьДанныеВнутреннейПодписью(Библиотека,
	Знач Данные,
	Знач ВключатьСертификатПодписантаВоВнутреннююПодпись = Истина,
	Знач ТипПодписи = Неопределено) Экспорт

	ТипЗначенияПараметраДанные = ТипЗнч(Данные);
	Если ТипЗначенияПараметраДанные = Тип("Строка") Тогда
		Если СтрНайти(Данные, ".") > 0 Тогда
			Возврат ПодписатьДанныеВнутреннейПодписьюФайл(Библиотека, Данные, ВключатьСертификатПодписантаВоВнутреннююПодпись, ТипПодписи);
		Иначе
			Возврат ПодписатьДанныеВнутреннейПодписьюСтрокаBase64(Библиотека, Данные, ВключатьСертификатПодписантаВоВнутреннююПодпись, ТипПодписи);	
		КонецЕсли;	
	ИначеЕсли ТипЗначенияПараметраДанные = Тип("ДвоичныеДанные") Тогда
		Возврат ПодписатьДанныеВнутреннейПодписьюДвоичныеДанные(Библиотека, Данные, ВключатьСертификатПодписантаВоВнутреннююПодпись, ТипПодписи);	
	КонецЕсли;		

КонецФункции

// Метод подписи данных, внутренней подписью, когда подпись и исходные данные вместе. 
//
// Параметры:
//  Библиотека - COMОбъект - объект библиотеки полученный с помощью метода ПолучитьОбъектБиблиотеки();
//  ПолноеИмяФайла - Строка - путь к файлу с данными которые необходимо подписать (в пути не должно быть пробелов!);
//  ВключатьСертификатПодписантаВоВнутреннююПодпись - Булево - признак необходимости включать сертификат подписанта
//    во внутренню подпись;
//
// Возвращаемое значение:
//  Строка - путь к сгенерированному, подписанному файлу.
//
Функция ПодписатьДанныеВнутреннейПодписьюФайл(Библиотека,
	Знач ПолноеИмяФайла,
	Знач ВключатьСертификатПодписантаВоВнутреннююПодпись = Истина,
	Знач ТипПодписи = Неопределено) Экспорт

	Если ТипПодписи <> Неопределено Тогда
		УстановитьТипПодписи(Библиотека, ТипПодписи);		
	КонецЕсли;

	ДанныеПодписиДвоичныеДанные = ПодписатьДанныеВнутреннейПодписьюДвоичныеДанные(Библиотека,
		ФайлВДвоичныеДанные(ПолноеИмяФайла),
		ВключатьСертификатПодписантаВоВнутреннююПодпись,
		ТипПодписи);
		
	Возврат ДвоичныеДанныеВФайл(ДанныеПодписиДвоичныеДанные,
		СформироватьПолноеИмяФайлаПодписанногоФайла(ПолноеИмяФайла,
			Ложь,
			?(EUSignСлужебныйКлиентСервер.ЭтоЗначениеПрограммногоПеречисления(ТипПодписи), ТипПодписи, Неопределено)));

КонецФункции

// Метод подписи данных, внутренней подписью, когда подпись и исходные данные вместе. 
//
// Параметры:
//  Библиотека - COMОбъект - объект библиотеки полученный с помощью метода ПолучитьОбъектБиблиотеки();
//  ДвоичныеДанные - ДвоичныеДанные - данные для подписи в виде ДвоичныеДанные;
//  ВключатьСертификатПодписантаВоВнутреннююПодпись - Булево - признак необходимости включать сертификат подписанта
//    во внутренню подпись;
//
// Возвращаемое значение:
//  ДвоичныеДанные - подписанные данные в виде ДвоичныеДанные.
//
Функция ПодписатьДанныеВнутреннейПодписьюДвоичныеДанные(Библиотека,
	Знач ДвоичныеДанные,
	Знач ВключатьСертификатПодписантаВоВнутреннююПодпись = Истина,
	Знач ТипПодписи = Неопределено) Экспорт

	Если ТипПодписи <> Неопределено Тогда
		УстановитьТипПодписи(Библиотека, ТипПодписи);		
	КонецЕсли;

	МассивБайтов = ДвоичныеДанныеВМассивБайтов(ДвоичныеДанные);
	COMSafeArray = Новый COMSafeArray(МассивБайтов, "VT_UI1");
	
	ДанныеПодписиСтрокаBase64 = Библиотека.SignDataInternal(COMSafeArray, ВключатьСертификатПодписантаВоВнутреннююПодпись);
	Возврат СтрокуBase64ВДвоичныеДанные(ДанныеПодписиСтрокаBase64);

КонецФункции

// Метод подписи данных, внутренней подписью, когда подпись и исходные данные вместе. 
//
// Параметры:
//  Библиотека - COMОбъект - объект библиотеки полученный с помощью метода ПолучитьОбъектБиблиотеки();
//  СтрокаBase64 - Строка - данные для подписи в виде строки в формате base64;
//  ВключатьСертификатПодписантаВоВнутреннююПодпись - Булево - признак необходимости включать сертификат подписанта
//    во внутренню подпись;
//
// Возвращаемое значение:
//  Строка - подписанные данные в виде строки в формате base64.
//
Функция ПодписатьДанныеВнутреннейПодписьюСтрокаBase64(Библиотека,
	Знач СтрокаBase64,
	Знач ВключатьСертификатПодписантаВоВнутреннююПодпись = Истина,
	Знач ТипПодписи = Неопределено) Экспорт

	Если ТипПодписи <> Неопределено Тогда
		УстановитьТипПодписи(Библиотека, ТипПодписи);		
	КонецЕсли;
	
	ДанныеПодписиСтрокаBase64 = Библиотека.SignDataInternal(СтрокаBase64, ВключатьСертификатПодписантаВоВнутреннююПодпись);
	Возврат ДанныеПодписиСтрокаBase64;

КонецФункции


// Метод проверки того что данные подписаны
// Метод оболочка над методами:
// ДанныеПодписаныФайл(),
// ДанныеПодписаныДвоичныеДанные(),
// ДанныеПодписаныСтрокаBase64()
//
// Параметры:
//  Библиотека - COMОбъект - объект библиотеки полученный с помощью метода ПолучитьОбъектБиблиотеки();
//  Данные - Строка, ДвоичныеДанные - данные для проверки наличия подписи;
//
// Возвращаемое значение:
//  Булево - Истина если данные подписаны, Ложь в противном случае
//
Функция ДанныеПодписаны(Библиотека,
	Знач Данные) Экспорт

	ТипЗначенияПараметраДанные = ТипЗнч(Данные);
	Если ТипЗначенияПараметраДанные = Тип("Строка") Тогда
		Если СтрНайти(Данные, ".") > 0 Тогда
			Возврат ДанныеПодписаныФайл(Библиотека, Данные);
		Иначе
			Возврат ДанныеПодписаныСтрокаBase64(Библиотека, Данные);	
		КонецЕсли;	
	ИначеЕсли ТипЗначенияПараметраДанные = Тип("ДвоичныеДанные") Тогда
		Возврат ДанныеПодписаныДвоичныеДанные(Библиотека, Данные);	
	КонецЕсли;		

КонецФункции

// Метод проверки того что данные подписаны
//
// Параметры:
//  Библиотека - COMОбъект - объект библиотеки полученный с помощью метода ПолучитьОбъектБиблиотеки();
//  ПолноеИмяФайла - Строка - путь к файлу с данными которые необходимо проверить на наличие подписи (в пути не должно быть пробелов!);
//
// Возвращаемое значение:
//  Булево - Истина если данные подписаны, Ложь в противном случае
//
Функция ДанныеПодписаныФайл(Библиотека, Знач ПолноеИмяФайла) Экспорт

	ФайлПодписан = Библиотека.IsSignedFile(ПолноеИмяФайла);
	Возврат ФайлПодписан;
	
КонецФункции

// Метод проверки того что данные подписаны
//
// Параметры:
//  Библиотека - COMОбъект - объект библиотеки полученный с помощью метода ПолучитьОбъектБиблиотеки();
//  ДвоичныеДанные - ДвоичныеДанные - данные которые необходимо проверить на наличие подписи;
//
// Возвращаемое значение:
//  Булево - Истина если данные подписаны, Ложь в противном случае
//
Функция ДанныеПодписаныДвоичныеДанные(Библиотека, Знач ДвоичныеДанные) Экспорт

	МассивБайтов = ДвоичныеДанныеВМассивБайтов(ДвоичныеДанные);
	COMSafeArray = Новый COMSafeArray(МассивБайтов, "VT_UI1");
	ДанныеПодписаны = Библиотека.IsSignedData(COMSafeArray);
	Возврат ДанныеПодписаны;

КонецФункции

// Метод проверки того что данные подписаны
//
// Параметры:
//  Библиотека - COMОбъект - объект библиотеки полученный с помощью метода ПолучитьОбъектБиблиотеки();
//  СтрокаBase64 - Строка - данные для проверки наличия подписи в виде строки в формате base64;
//
// Возвращаемое значение:
//  Булево - Истина если данные подписаны, Ложь в противном случае
//
Функция ДанныеПодписаныСтрокаBase64(Библиотека, Знач СтрокаBase64) Экспорт

	МассивБайтов = СтрокуBase64ВМассивБайтов(СтрокаBase64);
	COMSafeArray = Новый COMSafeArray(МассивБайтов, "VT_UI1");
	ДанныеПодписаны = Библиотека.IsSignedData(COMSafeArray);
	Возврат ДанныеПодписаны;

КонецФункции


// Метод получения информации о подписи данных 
// Метод оболочка над методами:
// ИнформацияОВнешнейПодписиДанныхФайл(),
// ИнформацияОВнешнейПодписиДанныхДвоичныеДанные(),
// ИнформацияОВнешнейПодписиДанныхСтрокаBase64()
//
// Параметры:
//  Библиотека - COMОбъект - объект библиотеки полученный с помощью метода ПолучитьОбъектБиблиотеки();
//  ИсходныеДанные - Строка, ДвоичныеДанные - исходные данные, т.е. не подписанные данные;
//  Подпись - Строка, ДвоичныеДанные - данны подписи исходных данных;
//
// Возвращаемое значение:
//  Неопределено, Структура - Структура если удалось получить информацию о подписи, в противном случае Неопределено.
//
Функция ИнформацияОВнешнейПодписиДанных(Библиотека, Знач ИсходныеДанные, Знач Подпись) Экспорт

	ТипЗначенияПараметраДанные = ТипЗнч(ИсходныеДанные);
	Если ТипЗначенияПараметраДанные = Тип("Строка") Тогда
		Если СтрНайти(ИсходныеДанные, ".") > 0 Тогда
			Возврат ИнформацияОВнешнейПодписиДанныхФайл(Библиотека, ИсходныеДанные, Подпись);
		Иначе
			Возврат ИнформацияОВнешнейПодписиДанныхСтрокаBase64(Библиотека, ИсходныеДанные, Подпись);	
		КонецЕсли;	
	ИначеЕсли ТипЗначенияПараметраДанные = Тип("ДвоичныеДанные") Тогда
		Возврат ИнформацияОВнешнейПодписиДанныхДвоичныеДанные(Библиотека, ИсходныеДанные, Подпись);	
	КонецЕсли;		

КонецФункции

// Метод получения информации о подписи данных 
//
// Параметры:
//  Библиотека - COMОбъект - объект библиотеки полученный с помощью метода ПолучитьОбъектБиблиотеки();
//  ИсходныеДанныеПолноеИмяФайла - Строка - путь к исходным(не подписанным) данным;
//  ПодписьПолноеИмяФайла - Строка - путь к файлу подписи;
//
// Возвращаемое значение:
//  Неопределено, Структура - Структура если удалось получить информацию о подписи, в противном случае Неопределено.
//
Функция ИнформацияОВнешнейПодписиДанныхФайл(Библиотека, Знач ИсходныеДанныеПолноеИмяФайла, Знач ПодписьПолноеИмяФайла) Экспорт

	ПодписьСтрокаBase64 = ФайлВСтрокуBase64(ПодписьПолноеИмяФайла);
	
	ОбъектДоступаКИнформации = Библиотека.VerifyFile(ИсходныеДанныеПолноеИмяФайла, ПодписьСтрокаBase64);
	Если ТипЗнч(ОбъектДоступаКИнформации) <> Тип("COMОбъект") Тогда
		Возврат Неопределено	
	КонецЕсли;
	
	ИнформацияОПодписи = EUSignКлиентСерверПовтИсп.СтруктураИнформацииОПодписи();
	Для Каждого КлючИЗначение Из ИнформацияОПодписи Цикл
		
		РезультатВычисления = COMВыполнитьМетодБезПараметров(ОбъектДоступаКИнформации, КлючИЗначение.Значение);
		
		Если ТипЗнч(РезультатВычисления) = Тип("COMSafeArray") Тогда
			ИнформацияОПодписи[КлючИЗначение.Ключ] = РезультатВычисления.GetValue(0);
		ИначеЕсли ТипЗнч(РезультатВычисления) = Тип("COMОбъект") Тогда
			Если ВРег(КлючИЗначение.Ключ) = "ПОДПИСАНТ" Тогда
				ИнформацияОПодписи[КлючИЗначение.Ключ] = EUSignКлиентСерверПовтИсп.СтруктураИнформацииОВладельцеСертификата();
				Для Каждого КлючИЗначение1 Из ИнформацияОПодписи[КлючИЗначение.Ключ] Цикл
					ИнформацияОПодписи[КлючИЗначение.Ключ][КлючИЗначение1.Ключ] = COMВыполнитьМетодБезПараметров(РезультатВычисления, КлючИЗначение1.Значение);	
				КонецЦикла;
			Иначе
				ИнформацияОПодписи[КлючИЗначение.Ключ] = Неопределено;	
			КонецЕсли;
		Иначе
			ИнформацияОПодписи[КлючИЗначение.Ключ] = РезультатВычисления;
		КонецЕсли;
		
	КонецЦикла;

	Возврат ИнформацияОПодписи;

КонецФункции

// Метод получения информации о подписи данных 
//
// Параметры:
//  Библиотека - COMОбъект - объект библиотеки полученный с помощью метода ПолучитьОбъектБиблиотеки();
//  ИсходныеДанныеДвоичныеДанные - Строка - исходные данные(не подписанные);
//  ПодписьДвоичныеДанные - Строка - данные подписи;
//
// Возвращаемое значение:
//  Неопределено, Структура - Структура если удалось получить информацию о подписи, в противном случае Неопределено.
//
Функция ИнформацияОВнешнейПодписиДанныхДвоичныеДанные(Библиотека, Знач ИсходныеДанныеДвоичныеДанные, Знач ПодписьДвоичныеДанные) Экспорт

	ИсходныеДанныеСтрокаBase64 = ДвоичныеДанныеВСтрокуBase64(ИсходныеДанныеДвоичныеДанные);
	ПодписьСтрокаBase64 = ДвоичныеДанныеВСтрокуBase64(ПодписьДвоичныеДанные);
	ИнформацияОПодписи = ИнформацияОВнешнейПодписиДанныхСтрокаBase64(Библиотека, ИсходныеДанныеСтрокаBase64, ПодписьСтрокаBase64);
	Возврат ИнформацияОПодписи;

КонецФункции

// Метод получения информации о подписи данных 
//
// Параметры:
//  Библиотека - COMОбъект - объект библиотеки полученный с помощью метода ПолучитьОбъектБиблиотеки();
//  ИсходныеДанныеСтрокаBase64 - Строка - исходные данные(не подписанные), в виде строки base64;
//  ПодписьСтрокаBase64 - Строка - данные подписи, в виде строки base64;
//
// Возвращаемое значение:
//  Неопределено, Структура - Структура если удалось получить информацию о подписи, в противном случае Неопределено.
//
Функция ИнформацияОВнешнейПодписиДанныхСтрокаBase64(Библиотека, Знач ИсходныеДанныеСтрокаBase64, Знач ПодписьСтрокаBase64) Экспорт

	ОбъектДоступаКИнформации = Библиотека.VerifyData(ИсходныеДанныеСтрокаBase64, ПодписьСтрокаBase64);
	Если ТипЗнч(ОбъектДоступаКИнформации) <> Тип("COMОбъект") Тогда
		Возврат Неопределено	
	КонецЕсли;

	ИнформацияОПодписи = EUSignКлиентСерверПовтИсп.СтруктураИнформацииОПодписи();
	Для Каждого КлючИЗначение Из ИнформацияОПодписи Цикл
		
		РезультатВычисления = COMВыполнитьМетодБезПараметров(ОбъектДоступаКИнформации, КлючИЗначение.Значение);
		
		Если ТипЗнч(РезультатВычисления) = Тип("COMSafeArray") Тогда
			Если РезультатВычисления.GetType() = "VT_UI1" Тогда
				ИнформацияОПодписи[КлючИЗначение.Ключ] = МассивБайтовВДвоичныеДанные(РезультатВычисления.Выгрузить());	
			Иначе
				ИнформацияОПодписи[КлючИЗначение.Ключ] = Неопределено;
			КонецЕсли;
		ИначеЕсли ТипЗнч(РезультатВычисления) = Тип("COMОбъект") Тогда
			Если ВРег(КлючИЗначение.Ключ) = "ПОДПИСАНТ" Тогда
				ИнформацияОПодписи[КлючИЗначение.Ключ] = EUSignКлиентСерверПовтИсп.СтруктураИнформацииОВладельцеСертификата();
				Для Каждого КлючИЗначение1 Из ИнформацияОПодписи[КлючИЗначение.Ключ] Цикл
					ИнформацияОПодписи[КлючИЗначение.Ключ][КлючИЗначение1.Ключ] = COMВыполнитьМетодБезПараметров(РезультатВычисления, КлючИЗначение1.Значение);	
				КонецЦикла;
			Иначе
				ИнформацияОПодписи[КлючИЗначение.Ключ] = Неопределено;	
			КонецЕсли;
		Иначе
			ИнформацияОПодписи[КлючИЗначение.Ключ] = РезультатВычисления;
		КонецЕсли;
		
	КонецЦикла;

	Возврат ИнформацияОПодписи;	

КонецФункции


// Метод получения информации о подписи данных 
// Метод оболочка над методами:
// ИнформацияОВнутреннейПодписиДанныхФайл(),
// ИнформацияОВнутреннейПодписиДанныхДвоичныеДанные(),
// ИнформацияОВнутреннейПодписиДанныхСтрокаBase64()
//
// Параметры:
//  Библиотека - COMОбъект - объект библиотеки полученный с помощью метода ПолучитьОбъектБиблиотеки();
//  Данные - Строка, ДвоичныеДанные - данные для получения информации о подписи;
//
// Возвращаемое значение:
//  Неопределено, Структура - Структура если удалось получить информацию о подписи, в противном случае Неопределено.
//
Функция ИнформацияОВнутреннейПодписиДанных(Библиотека, Знач Данные) Экспорт

	ТипЗначенияПараметраДанные = ТипЗнч(Данные);
	Если ТипЗначенияПараметраДанные = Тип("Строка") Тогда
		Если СтрНайти(Данные, ".") > 0 Тогда
			Возврат ИнформацияОВнутреннейПодписиДанныхФайл(Библиотека, Данные);
		Иначе
			Возврат ИнформацияОВнутреннейПодписиДанныхСтрокаBase64(Библиотека, Данные);	
		КонецЕсли;	
	ИначеЕсли ТипЗначенияПараметраДанные = Тип("ДвоичныеДанные") Тогда
		Возврат ИнформацияОВнутреннейПодписиДанныхДвоичныеДанные(Библиотека, Данные);	
	КонецЕсли;		

КонецФункции

// Метод получения информации о подписи данных 
//
// Параметры:
//  Библиотека - COMОбъект - объект библиотеки полученный с помощью метода ПолучитьОбъектБиблиотеки();
//  ПолноеИмяФайла - Строка - путь к файлу с данными из которых необходимо получить информацию о подписи (в пути не должно быть пробелов!);
//
// Возвращаемое значение:
//  Неопределено, Структура - Структура если удалось получить информацию о подписи, в противном случае Неопределено.
//
Функция ИнформацияОВнутреннейПодписиДанныхФайл(Библиотека, Знач ПолноеИмяФайла) Экспорт

	ДвоичныеДанные = ФайлВДвоичныеДанные(ПолноеИмяФайла);
	ИнформацияОПодписи = ИнформацияОВнутреннейПодписиДанныхДвоичныеДанные(Библиотека, ДвоичныеДанные);
	Возврат ИнформацияОПодписи;

КонецФункции

// Метод получения информации о подписи данных 
//
// Параметры:
//  Библиотека - COMОбъект - объект библиотеки полученный с помощью метода ПолучитьОбъектБиблиотеки();
//  ДвоичныеДанные - ДвоичныеДанные - данные для получения информации о подписи в виде ДвоичныеДанные;
//
// Возвращаемое значение:
//  Неопределено, Структура - Структура если удалось получить информацию о подписи, в противном случае Неопределено.
//
Функция ИнформацияОВнутреннейПодписиДанныхДвоичныеДанные(Библиотека, Знач ДвоичныеДанные) Экспорт

	СтрокаBase64 = ДвоичныеДанныеВСтрокуBase64(ДвоичныеДанные);
	ИнформацияОПодписи = ИнформацияОВнутреннейПодписиДанныхСтрокаBase64(Библиотека, СтрокаBase64);
	Возврат ИнформацияОПодписи;

КонецФункции

// Метод получения информации о подписи данных 
//
// Параметры:
//  Библиотека - COMОбъект - объект библиотеки полученный с помощью метода ПолучитьОбъектБиблиотеки();
//  СтрокаBase64 - Строка - данные для получения информации о подписи в виде строки в формате base64;
//
// Возвращаемое значение:
//  Неопределено, Структура - Структура если удалось получить информацию о подписи, в противном случае Неопределено.
//
Функция ИнформацияОВнутреннейПодписиДанныхСтрокаBase64(Библиотека, Знач СтрокаBase64) Экспорт

	ОбъектДоступаКИнформации = Библиотека.VerifyDataInternal(СтрокаBase64);
	Если ТипЗнч(ОбъектДоступаКИнформации) <> Тип("COMОбъект") Тогда
		Возврат Неопределено	
	КонецЕсли;
	
	ИнформацияОПодписи = EUSignКлиентСерверПовтИсп.СтруктураИнформацииОПодписи();
	Для Каждого КлючИЗначение Из ИнформацияОПодписи Цикл
		
		РезультатВычисления = COMВыполнитьМетодБезПараметров(ОбъектДоступаКИнформации, КлючИЗначение.Значение);
		
		Если ТипЗнч(РезультатВычисления) = Тип("COMSafeArray") Тогда
			Если РезультатВычисления.GetType() = "VT_UI1" Тогда
				ИнформацияОПодписи[КлючИЗначение.Ключ] = МассивБайтовВДвоичныеДанные(РезультатВычисления.Выгрузить());	
			Иначе
				ИнформацияОПодписи[КлючИЗначение.Ключ] = Неопределено;
			КонецЕсли;
		ИначеЕсли ТипЗнч(РезультатВычисления) = Тип("COMОбъект") Тогда
			Если ВРег(КлючИЗначение.Ключ) = "ПОДПИСАНТ" Тогда
				ИнформацияОПодписи[КлючИЗначение.Ключ] = EUSignКлиентСерверПовтИсп.СтруктураИнформацииОВладельцеСертификата();
				Для Каждого КлючИЗначение1 Из ИнформацияОПодписи[КлючИЗначение.Ключ] Цикл
					ИнформацияОПодписи[КлючИЗначение.Ключ][КлючИЗначение1.Ключ] = COMВыполнитьМетодБезПараметров(РезультатВычисления, КлючИЗначение1.Значение);	
				КонецЦикла;
			Иначе
				ИнформацияОПодписи[КлючИЗначение.Ключ] = Неопределено;	
			КонецЕсли;
		Иначе
			ИнформацияОПодписи[КлючИЗначение.Ключ] = РезультатВычисления;
		КонецЕсли;
		
	КонецЦикла;

	Возврат ИнформацияОПодписи;	

КонецФункции


Функция COMВыполнитьМетодБезПараметров(Знач Объект, Знач ИмяМетода, Знач РезультатПоУмолчанию = "")

	Попытка
		Результат = Вычислить(СтрШаблон("Объект.%1()", ИмяМетода));
	Исключение
		Результат = РезультатПоУмолчанию;
	КонецПопытки;	

	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РаботаСШифрованием

Функция ЗашифроватьФайл(Библиотека, Знач ПолноеИмяФайла, Знач СертификатПолучателя) Экспорт

	ПолноеИмяЗашифрованногоФайла = ПолучитьИмяВременногоФайла();

	ТекстовыйДокумент = Новый ТекстовыйДокумент; 
	ТекстовыйДокумент.Записать(ПолноеИмяЗашифрованногоФайла);
	
	Сообщить(ПолноеИмяЗашифрованногоФайла);
	
	Рез = Библиотека.ProcessFile(ПолноеИмяФайла, ПолноеИмяЗашифрованногоФайла, 8, СертификатПолучателя);
	
КонецФункции

#КонецОбласти

#Область РаботаЧерезИнтерфейс

// Только для исполнения в контексте клиента

Функция ИнтерфейсУстановкиНастроек(Библиотека) Экспорт

	Библиотека.SetSettings();	

КонецФункции

Функция ИнтерфейсЧтенияКлюча(Библиотека) Экспорт

	Библиотека.ReadPrivateKey();	

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область КонвертацияДанных

#Область КонвертацияДвоичныхДанных

// Метод преобразования двоичных данных в файл 
//
// Параметры:
//  ДвоичныеДанные - ДвоичныеДанные - двоичные данные файла;
//  ПолноеИмяФайла - Строка - полное имя файла в который необходимо записать двоичные данные,
//   если не указан то будет сгенерирован временный файл;
//
// Возвращаемое значение:
//  Строка - полное имя файла в который записаны двоичные данные.
//
Функция ДвоичныеДанныеВФайл(Знач ДвоичныеДанные, Знач ПолноеИмяФайла = Неопределено) Экспорт

	Если ПолноеИмяФайла = Неопределено Тогда
		ПолноеИмяФайла = ПолучитьИмяВременногоФайла();	
	КонецЕсли;
	
	ДвоичныеДанные.Записать(ПолноеИмяФайла);
	
	Возврат ПолноеИмяФайла;

КонецФункции

// Метод правильного преобразования в строку base64
// при преобразовании удаляються лишние символы, а именно "перевод на новую строку".
//
// Параметры:
//  ДвоичныеДанные - ДвоичныеДанные - двоичные данные файла;
//
// Возвращаемое значение:
//  Строка - строка в формате base64
//
Функция ДвоичныеДанныеВСтрокуBase64(Знач ДвоичныеДанные) Экспорт

	Результат = Base64Строка(ДвоичныеДанные);
	Результат = СтрЗаменить(Результат, Символы.ПС, "");
	Результат = СтрЗаменить(Результат, Символы.ВК, "");
	
	Возврат Результат;	

КонецФункции

// Метод преобразования двоичных данных в массив байтов 
//
// Параметры:
//  ДвоичныеДанные - ДвоичныеДанные - двоичные данные файла;
//
// Возвращаемое значение:
//  Массив - массив с элементами(тип - Число).
//
Функция ДвоичныеДанныеВМассивБайтов(Знач ДвоичныеДанные) Экспорт

	Результат = Новый Массив;

	Размер = ДвоичныеДанные.Размер();
	
	Поток = ДвоичныеДанные.ОткрытьПотокДляЧтения();
	БуферДвоичныхДанных = Новый БуферДвоичныхДанных(Размер);
	
	Для Индекс = 0 По Размер - 1 Цикл		
		ПрочитаноБайтов = Поток.Прочитать(БуферДвоичныхДанных, Индекс, 1);
		Результат.Добавить(БуферДвоичныхДанных.Получить(Индекс));
	КонецЦикла;
	
	Поток.Закрыть();
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область КонвертацияBase64

// Метод преобразования строки base64 в файл 
//
// Параметры:
//  СтрокаBase64 - Строка - строка в формате base64;
//  ПолноеИмяФайла - Строка - полное имя файла в который необходимо записать данные из строки base64,
//   если не указан то будет сгенерирован временный файл;
//
// Возвращаемое значение:
//  Строка - полное имя файла в который записаны данные из строки base64.
//
Функция СтрокуBase64ВФайл(Знач СтрокаBase64, Знач ПолноеИмяФайла = Неопределено) Экспорт
	
	ДвоичныеДанные = СтрокуBase64ВДвоичныеДанные(СтрокаBase64);	
	Возврат ДвоичныеДанныеВФайл(ДвоичныеДанные, ПолноеИмяФайла);
	
КонецФункции

// Метод преобразования строки base64 в двоичные данные 
//
// Параметры:
//  СтрокаBase64 - Строка - строка в формате base64;
//
// Возвращаемое значение:
//  ДвоичныеДанные - двоичные данные файла.
//
Функция СтрокуBase64ВДвоичныеДанные(Знач СтрокаBase64) Экспорт

	Возврат Base64Значение(СтрокаBase64);
	
КонецФункции

// Метод преобразования строки base64 в массив байтов 
//
// Параметры:
//  СтрокаBase64 - Строка - строка в формате base64;
//
// Возвращаемое значение:
//  Массив - массив с элементами(тип - Число).
//
Функция СтрокуBase64ВМассивБайтов(Знач СтрокаBase64) Экспорт

	ДвоичныеДанные = СтрокуBase64ВДвоичныеДанные(СтрокаBase64);
	МассивБайтов = ДвоичныеДанныеВМассивБайтов(ДвоичныеДанные);
	Возврат МассивБайтов;
	
КонецФункции

#КонецОбласти

#Область КонвертацияФайла

// Метод правильного преобразования файла в строку base64
// при преобразовании удаляються лишние символы, а именно "перевод на новую строку".
//
// Параметры:
//  ПолноеИмяФайла - Строка - путь к файлу;
//
// Возвращаемое значение:
//  Строка - строка в формате base64
//
Функция ФайлВСтрокуBase64(Знач ПолноеИмяФайла) Экспорт

	ДвоичныеДанныеДляПреобразования = Новый ДвоичныеДанные(ПолноеИмяФайла);
	Возврат ДвоичныеДанныеВСтрокуBase64(ДвоичныеДанныеДляПреобразования);

КонецФункции

// Метод преобразования файла в двоичные данные
//
// Параметры:
//  ПолноеИмяФайла - Строка - путь к файлу;
//
// Возвращаемое значение:
//  ДвоичныеДанные - двоичные данные файла.
//
Функция ФайлВДвоичныеДанные(Знач ПолноеИмяФайла) Экспорт

	Возврат Новый ДвоичныеДанные(ПолноеИмяФайла);	

КонецФункции

// Метод преобразования файла в массив байтов 
//
// Параметры:
//  ПолноеИмяФайла - Строка - путь к файлу;
//
// Возвращаемое значение:
//  Массив - массив с элементами(тип - Число).
//
Функция ФайлВМассивБайтов(Знач ПолноеИмяФайла) Экспорт

	ДвоичныеДанные = ФайлВДвоичныеДанные(ПолноеИмяФайла);	
	МассивБайтов = ДвоичныеДанныеВМассивБайтов(ДвоичныеДанные);
	Возврат МассивБайтов;
	
КонецФункции

#КонецОбласти

#Область КонвертацияМассиваБайтов

// Метод преобразования массива байтов в двоичные данные
//
// Параметры:
//  МассивБайтов - Массив - массив байтов (тип элемента массива - Число);
//
// Возвращаемое значение:
//  ДвоичныеДанные - двоичные данные
//
Функция МассивБайтовВДвоичныеДанные(Знач МассивБайтов) Экспорт

	Размер = МассивБайтов.Количество();
	
	БуферДвоичныхДанных = Новый БуферДвоичныхДанных(Размер);
	Для Индекс = 0 По Размер - 1 Цикл
		БуферДвоичныхДанных.Установить(Индекс, МассивБайтов[Индекс]);    
	КонецЦикла;
    
	ПотокВПамяти = Новый ПотокВПамяти(БуферДвоичныхДанных);
	ДвоичныеДанные = ПотокВПамяти.ЗакрытьИПолучитьДвоичныеДанные();
	Возврат ДвоичныеДанные;

КонецФункции

// Метод преобразования массива байтов в двоичные данные
//
// Параметры:
//  МассивБайтов - Массив - массив байтов (тип элемента массива - Число);
//
// Возвращаемое значение:
//  Строка - строка в формате base64
//
Функция МассивБайтовВСтрокуBase64(Знач МассивБайтов) Экспорт

	ДвоичныеДанные = МассивБайтовВДвоичныеДанные(МассивБайтов);
	СтрокуBase64 = ДвоичныеДанныеВСтрокуBase64(ДвоичныеДанные);
	Возврат СтрокуBase64;

КонецФункции

// Метод преобразования массива байтов в файл 
//
// Параметры:
//  МассивБайтов - Массив - массив байтов (тип элемента массива - Число);
//  ПолноеИмяФайла - Строка - полное имя файла в который необходимо записать данные из массива байтов,
//   если не указан то будет сгенерирован временный файл;
//
// Возвращаемое значение:
//  Строка - полное имя файла в который записаны данные из строки base64.
//
Функция МассивБайтовВФайл(Знач МассивБайтов, Знач ПолноеИмяФайла = Неопределено) Экспорт

	ДвоичныеДанные = МассивБайтовВДвоичныеДанные(МассивБайтов);
	Возврат ДвоичныеДанныеВФайл(ДвоичныеДанные, ПолноеИмяФайла);

КонецФункции

#КонецОбласти

#КонецОбласти

#Область РаботаСФайлами

// Формирование читабельного и информативного имени подписанного файла 
//
// Параметры:
//  ПолноеИмяИсходногоФайла - Строка - поное имя исходного файла;
//  ФорматПодписи - Строка - если Истина - внешняя подпись, если Ложь - внутрення подпись;
//  ТипПодписи - Число, ПрограммноеПеречисление.ТипПодписи - значение типа подписис, см. программное перечисление EUSignКлиентСерверПовтИсп.ТипПодписи();
//
// Возвращаемое значение:
//  Строка - полное имя подписанного файла.
//
Функция СформироватьПолноеИмяФайлаПодписанногоФайла(Знач ПолноеИмяИсходногоФайла,
	Знач ФорматПодписи = Ложь,
	Знач ТипПодписи = 0) Экспорт

	ФайлИнфо = Новый Файл(ПолноеИмяИсходногоФайла);
	ИмяПодписанногоФайла = ФайлИнфо.Имя;
	
	// ФорматПодписи
	Если ФорматПодписи Тогда
		ИмяПодписанногоФайла = СтрШаблон("%1.ext", ИмяПодписанногоФайла);
	Иначе
		ИмяПодписанногоФайла = СтрШаблон("%1.int", ИмяПодписанногоФайла);	
	КонецЕсли;
	
	// ТипПодписи
	Если EUSignСлужебныйКлиентСервер.ЭтоЗначениеПрограммногоПеречисления(ТипПодписи) Тогда
		ИмяПодписанногоФайла = СтрШаблон("%1.%2", ИмяПодписанногоФайла,
			НРег(СтрЗаменить(ТипПодписи.Представление, " ", "-")));	
	Иначе
		Если ТипПодписи = 0 Тогда
			ИмяПодписанногоФайла = СтрШаблон("%1.unknown", ИмяПодписанногоФайла);
		ИначеЕсли ТипПодписи = 1 Тогда
			ИмяПодписанногоФайла = СтрШаблон("%1.cades-bes", ИмяПодписанногоФайла);
		ИначеЕсли ТипПодписи = 4 Тогда
			ИмяПодписанногоФайла = СтрШаблон("%1.cades-t", ИмяПодписанногоФайла);
		ИначеЕсли ТипПодписи = 8 Тогда
			ИмяПодписанногоФайла = СтрШаблон("%1.cades-c", ИмяПодписанногоФайла);
		ИначеЕсли ТипПодписи = 16 Тогда
			ИмяПодписанногоФайла = СтрШаблон("%1.cades-x-long", ИмяПодписанногоФайла);
		ИначеЕсли ТипПодписи = 128 Тогда
			ИмяПодписанногоФайла = СтрШаблон("%1.cades-x-long-trusted", ИмяПодписанногоФайла);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СформироватьПолноеИмяФайла(ФайлИнфо.Путь, ИмяПодписанногоФайла, ".p7s");

КонецФункции

Функция СформироватьПолноеИмяФайла(Знач Каталог, Знач ИмяФайла, Знач Расширение = "") Экспорт

	РазделитьКаталога = ?(СтрЗаканчиваетсяНа(Каталог, "\"), "", "\");
	РазделительРасширения = ?(СтрНачинаетсяС(Расширение, "."), "", ".");
	
	Возврат СтрШаблон("%1%2%3%4%5", Каталог, РазделитьКаталога, ИмяФайла, РазделительРасширения, Расширение);

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СформироватьТекстИсключения(Знач Текст)

	Результат = "";
	
	ОписаниеОшибки = ОписаниеОшибки();	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		Результат = СтрШаблон("%1%2%3", Текст, Символы.ПС, ОписаниеОшибки());
	Иначе
		Результат = Текст;
	КонецЕсли;
	
	Возврат Результат;	

КонецФункции

Функция ПереопределитьЗначенияПараметров(БазоваяСтруктураПараметров,
	Знач ПараметрыДляПереопределения,
	Знач ПрефиксПараметровДляПереопределения = "")

	Если ПараметрыДляПереопределения <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(ПрефиксПараметровДляПереопределения) Тогда
			Для Каждого КлючИЗначение Из БазоваяСтруктураПараметров Цикл
				КлючЗначения = СтрШаблон("%1%2", ПрефиксПараметровДляПереопределения, КлючИЗначение.Ключ);
				НайденноеЗначение = Неопределено;
				Если ПараметрыДляПереопределения.Свойство(КлючЗначения, НайденноеЗначение) Тогда
					БазоваяСтруктураПараметров[КлючИЗначение.Ключ] = НайденноеЗначение;
				КонецЕсли;	
			КонецЦикла;
		Иначе
			ЗаполнитьЗначенияСвойств(БазоваяСтруктураПараметров, ПараметрыДляПереопределения);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат БазоваяСтруктураПараметров;

КонецФункции

#КонецОбласти