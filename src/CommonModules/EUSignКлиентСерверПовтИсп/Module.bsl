
#Область ПрограммныйИнтерфейс
//
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция СтруктураИнформацииОВладельцеСертификата() Экспорт

	ИнформацияОВладельце = Новый Структура;
	
	// DNS
	ИнформацияОВладельце.Вставить("DNS", "GetDNS"); // Содержит информацию о DNS-имя или другом техническом средстве
	
	// АЦСК
	ИнформацияОВладельце.Вставить("АЦСКИдентификатор", "GetIssuerCertificateID"); // Содержит информацию об идентификаторе ЦСК, выпустившем сертификат
	ИнформацияОВладельце.Вставить("АЦСКРеквизиты", "GetIssuerCommonName"); // Содержит информацию о реквизитах ЦСК, выдавшего сертификат.
	
	// Сертификат
	ИнформацияОВладельце.Вставить("СертификатИдентификатор", "GetCertificateID"); // Содержит информацию об идентификаторе сертификата
	ИнформацияОВладельце.Вставить("СертификатСерийныйНомер", "GetCertificateSerial"); // Содержит информацию о серийном номере сертификата
	ИнформацияОВладельце.Вставить("СертификатОтпечаток", "GetThumbprint"); // Содержит информацию об отпечатке сертификата
	ИнформацияОВладельце.Вставить("СертификатДействителенС", "GetCertBeginTime"); // Время ввода сертификата в действие
	ИнформацияОВладельце.Вставить("СертификатДействителенДо", "GetCertEndTime"); // Дата окончания действия сертификата
	
	// Владелец сертификата/ключа
	ИнформацияОВладельце.Вставить("ВладелецСертификата", "GetCommonName"); // Содержит информацию о реквизитах владельца сертификата
	ИнформацияОВладельце.Вставить("ВладелецСертификатаИмя", "GetFullName"); // Содержит информацию о полном имени владельца сертификата
	ИнформацияОВладельце.Вставить("ВладельцСертификатаЕГРПОУ", "GetEDRPOUCode"); // Содержит информацию о ЕГРПОУ коде владельца сертификата
	ИнформацияОВладельце.Вставить("ВладелецСертификатаДРФО", "GetDRFOCode"); // Содержит информацию о ДРФЛ коде владельца сертификата
	ИнформацияОВладельце.Вставить("ВладелецСертификатаОрганизация", "GetOrganization"); // Содержит информацию об организации, к которой относится владелец сертификата
	ИнформацияОВладельце.Вставить("ВладелецСертификатаПодразделение", "GetOragizationalUnit"); // Содержит информацию о подразделении организации, к которой принадлежит владелец сертификата
	ИнформацияОВладельце.Вставить("ВладелецСертификатаДолжность", "GetTitle"); // Содержит информацию о должности владельца сертификата
	ИнформацияОВладельце.Вставить("ВладелецСертификатаГосударство", "GetState"); // Содержит информацию о государстве, к которому принадлежит владелец сертификата
	ИнформацияОВладельце.Вставить("ВладелецСертификатаНаселенныйПункт", "GetLocality"); // Содержит информацию о населенном пункте, к которому принадлежит владелец сертификата
	ИнформацияОВладельце.Вставить("ВладелецСертификатаАдрес", "GetAddress"); // Содержит информацию об адресе владельца сертификата
	ИнформацияОВладельце.Вставить("ВладелецСертификатаТелефон", "GetPhone"); // Содержит информацию о телефоне владельца сертификата
	ИнформацияОВладельце.Вставить("ВладелецСертификатаЭлектроннаяПочта", "GetEMail"); // Содержит информацию об адресе электронной почты владельца сертификата

	// Ключ
	ИнформацияОВладельце.Вставить("КлючНазначение", "GetCertExtKeyUsages"); // Уточненное назначение ключа
	ИнформацияОВладельце.Вставить("КлючДействителеС", "GetPrivKeyBeginTime"); // Время ввода в действие личного ключа
	ИнформацияОВладельце.Вставить("КлючДействителенДо", "GetPrivKeyEndTime"); // Время вывода из действия личного ключа
	
	Возврат ИнформацияОВладельце;

КонецФункции

Функция СтруктураИнформацииОПодписи()

	ИнформацияОПодписи = Новый Структура;
	ИнформацияОПодписи.Вставить("Подписант", "GetSignerInfo"); // Расширенная информация о подписчике
	ИнформацияОПодписи.Вставить("ВремяПодписиЕсть", "IsTimeExist"); // Признак наличия времени подписи
	ИнформацияОПодписи.Вставить("ВремяПодписи", "GetTime"); // Время подписи
	ИнформацияОПодписи.Вставить("МеткаВремениПодписиЕсть", "IsTimeStamp"); // Признак наличия метки времени подписи
	ИнформацияОПодписи.Вставить("Данные", "GetData"); // Подписанные данные
	
	Возврат ИнформацияОПодписи;

КонецФункции


#Область ПрограммныеПеречисления

Функция РазделРеестра(Знач Значение = Неопределено) Экспорт

	ПП = EUSignСлужебныйКлиентСервер.ПрограммноеПеречисление();
	EUSignСлужебныйКлиентСервер.ДобавитьЗначениеПрограммногоПеречисления(ПП, "DEFAULT", 0);
	EUSignСлужебныйКлиентСервер.ДобавитьЗначениеПрограммногоПеречисления(ПП, "HKLM", 1);
	EUSignСлужебныйКлиентСервер.ДобавитьЗначениеПрограммногоПеречисления(ПП, "HKCU", 2);
	
	Возврат ?(Значение <> Неопределено, ПП[Значение], ПП);

КонецФункции

Функция ГрафическийРежим(Знач Значение = Неопределено) Экспорт

	ПП = EUSignСлужебныйКлиентСервер.ПрограммноеПеречисление();
	EUSignСлужебныйКлиентСервер.ДобавитьЗначениеПрограммногоПеречисления(ПП, "ВКЛЮЧЕНО", 1);
	EUSignСлужебныйКлиентСервер.ДобавитьЗначениеПрограммногоПеречисления(ПП, "ВЫКЛЮЧЕНО", 0);
	
	Возврат ?(Значение <> Неопределено, ПП[Значение], ПП);
	
КонецФункции

Функция РежимВзаимодействияАЦСК(Знач Значение = Неопределено) Экспорт

	
	ПП = EUSignСлужебныйКлиентСервер.ПрограммноеПеречисление();
	EUSignСлужебныйКлиентСервер.ДобавитьЗначениеПрограммногоПеречисления(ПП, "ONLINE", 0, "Online");
	EUSignСлужебныйКлиентСервер.ДобавитьЗначениеПрограммногоПеречисления(ПП, "OFFLINE", 1, "Offline");
	
	Возврат ?(Значение <> Неопределено, ПП[Значение], ПП);

КонецФункции

Функция ТипПодписи(Знач Значение = Неопределено) Экспорт

	// CAdES-BES – базовый формат подписи. В зависимости от параметров библиотеки и параметров вызова функции подписи
	// может включать отметку времени от данных и сертификат подписчика;
	// CAdES-T - подисок CAdES-BES, дополнительно включающий отметку времени от ЭЦП;
	// CAdES-C - подпись CAdES-T, дополнительно включающая ссылку на полный набор сертификатов для проверки подписи;
	// CAdES-X Long - подпись CAdES-C, дополнительно включающая полный набор сертификатов ЦСК для проверки подписи,
	// а также ответы от OCSP сервера со статусом сертификата подписчика;
	// CAdES-X Long + CAdES-X Long Trusted - подпись CAdES-X Long, дополнительно включающая отметку времени с полным
	// набором сертификатов ЦСК для проверки отметки времени, а также ответы от OCSP сервера
	// со статусом сертификатов TSP-сервера и АЦСК

	// Примечание.
	// Для добавления меток времени и ответов OCSP необходимо в настройках криптобиблиотеки включить режим работы
	// и использование серверов TSP и OCSP.
	
	ПП = EUSignСлужебныйКлиентСервер.ПрограммноеПеречисление();
	EUSignСлужебныйКлиентСервер.ДобавитьЗначениеПрограммногоПеречисления(ПП, "UNKNOWN", 0);
	EUSignСлужебныйКлиентСервер.ДобавитьЗначениеПрограммногоПеречисления(ПП, "CADES_BES", 1, "CAdES-BES");
	EUSignСлужебныйКлиентСервер.ДобавитьЗначениеПрограммногоПеречисления(ПП, "CADES_T", 4, "CAdES-T");
	EUSignСлужебныйКлиентСервер.ДобавитьЗначениеПрограммногоПеречисления(ПП, "CADES_C", 8, "CAdES-C");
	EUSignСлужебныйКлиентСервер.ДобавитьЗначениеПрограммногоПеречисления(ПП, "CADES_X_LONG", 16, "CAdES-X Long");
	EUSignСлужебныйКлиентСервер.ДобавитьЗначениеПрограммногоПеречисления(ПП, "CADES_X_LONG_TRUSTED", 128, "CAdES-X Long Trusted"); // протестировать

	Возврат ?(Значение <> Неопределено, ПП[Значение], ПП);

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
//
#КонецОбласти