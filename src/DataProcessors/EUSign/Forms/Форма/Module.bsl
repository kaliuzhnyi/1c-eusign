
#Область ОписаниеПеременных
//
#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИнициализироватьЗначенияПоУмолчанию();	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	УстановитьОформлениеЭлементаГруппаПроверятьСписокОтозванныхСертификатовДетально();
	УстановитьОформлениеЭлементаПроверятьСписокОтозванныхСертификатовПолныйИЧастичный();
	УстановитьОформлениеЭлементаГруппаProxyНастройки();
	УстановитьОформлениеЭлементаГруппаProxyАвторизация();
	УстановитьОформлениеЭлементаГруппаTSPНастройки();
	УстановитьОформлениеЭлементаГруппаOCSPНастройки();
	УстановитьОформлениеЭлементаГруппаLDAPНастройки();
	УстановитьОформлениеЭлементаГруппаLDAPАвторизация();
	УстановитьОформлениеЭлементаГруппаCMPНастройки();
	УстановитьОформлениеЭлементаКомандаИнтерфейсНастроек();
	УстановитьОформлениеЭлементаВключатьСертификатПодписантаВоВнутреннююПодпись();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура РежимРаботыПриИзменении(Элемент)
	
	УстановитьОформлениеЭлементаКомандаИнтерфейсНастроек();
	
КонецПроцедуры

#Область СтраницаГруппаБиблиотека

&НаКлиенте
Процедура КаталогБиблиотекиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.Заголовок = Нстр("ru = 'Выберите каталог'; uk = 'Виберіть каталог'");;
	ДиалогВыбораФайла.Каталог = КаталогБиблиотеки;
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("КаталогБиблиотекиНачалоВыбораПосле", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогБиблиотекиНачалоВыбораПосле(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	КаталогБиблиотеки = Результат[0];	

КонецПроцедуры

&НаКлиенте
Процедура КаталогБиблиотекиОткрытие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	НачатьЗапускПриложения(Новый ОписаниеОповещения("КаталогБиблиотекиОткрытиеПосле", ЭтотОбъект),
		КаталогБиблиотеки,, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогБиблиотекиОткрытиеПосле(КодВозврата, ДополнительныеПараметры) Экспорт
//
КонецПроцедуры

#Область ТаблицаНастроекАЦСК

&НаКлиенте
Процедура ТаблицаНастроекАЦСКПометкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;

	Для Каждого Строка Из ТаблицаНастроекАЦСК Цикл
		Если Строка.ПолучитьИдентификатор() <> ТекущиеДанные.ПолучитьИдентификатор() Тогда
			Строка.Пометка = Ложь;	
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьНастройкиПоТекущемуАЦСК();
	УстановитьОформлениеЭлементаГруппаTSPНастройки();
	УстановитьОформлениеЭлементаГруппаOCSPНастройки();
	УстановитьОформлениеЭлементаГруппаLDAPНастройки();
	УстановитьОформлениеЭлементаГруппаCMPНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНастроекАЦСКTSPИспользоватьПриИзменении(Элемент)
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Если ТекущиеДанные.Пометка Тогда
		TSPИспользовать = ТекущиеДанные.TSPИспользовать;
		УстановитьОформлениеЭлементаГруппаTSPНастройки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНастроекАЦСКOSCPИспользоватьПриИзменении(Элемент)

	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Если ТекущиеДанные.Пометка Тогда
		OCSPИспользовать = ТекущиеДанные.OCSPИспользовать;
		УстановитьОформлениеЭлементаГруппаOCSPНастройки();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНастроекАЦСКLDAPИспользоватьПриИзменении(Элемент)

	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Если ТекущиеДанные.Пометка Тогда
		LDAPИспользовать = ТекущиеДанные.LDAPИспользовать;
		УстановитьОформлениеЭлементаГруппаLDAPНастройки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНастроекАЦСКCMPИспользоватьПриИзменении(Элемент)

	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Если ТекущиеДанные.Пометка Тогда
		CMPИспользовать = ТекущиеДанные.CMPИспользовать;
		УстановитьОформлениеЭлементаГруппаCMPНастройки();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СтраницаГруппаХранилище

&НаКлиенте
Процедура КаталогХранилищаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.Заголовок = Нстр("ru = 'Выберите каталог'; uk = 'Виберіть каталог'");;
	ДиалогВыбораФайла.Каталог = КаталогХранилища;
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("КаталогХранилищаНачалоВыбораПосле", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогХранилищаНачалоВыбораПосле(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	КаталогХранилища = Результат[0];	

КонецПроцедуры

&НаКлиенте
Процедура КаталогХранилищаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НачатьЗапускПриложения(Новый ОписаниеОповещения("КаталогХранилищаОткрытиеПосле", ЭтотОбъект),
		КаталогХранилища,, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогХранилищаОткрытиеПосле(КодВозврата, ДополнительныеПараметры) Экспорт
//
КонецПроцедуры

&НаКлиенте
Процедура ПроверятьСписокОтозванныхСертификатовПриИзменении(Элемент)
	
	УстановитьОформлениеЭлементаГруппаПроверятьСписокОтозванныхСертификатовДетально();
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоматическиЗагружатьСписокОтозванныхСертификатовПриИзменении(Элемент)
	
	УстановитьОформлениеЭлементаПроверятьСписокОтозванныхСертификатовПолныйИЧастичный();
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаГруппаProxy

&НаКлиенте
Процедура ProxyИспользоватьПриИзменении(Элемент)
	
	УстановитьОформлениеЭлементаГруппаProxyНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ProxyАнонимныйПриИзменении(Элемент)
	
	УстановитьОформлениеЭлементаГруппаProxyАвторизация();
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаГруппаСерверTSP

&НаКлиенте
Процедура TSPИспользоватьПриИзменении(Элемент)
	
	УстановитьОформлениеЭлементаГруппаTSPНастройки();
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаГруппаСерверOCSP

&НаКлиенте
Процедура OCSPИспользоватьПриИзменении(Элемент)
	
	УстановитьОформлениеЭлементаГруппаOCSPНастройки();
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаГруппаСерверLDAP

&НаКлиенте
Процедура LDAPИспользоватьПриИзменении(Элемент)
	
	УстановитьОформлениеЭлементаГруппаLDAPНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура LDAPАнонимныйПриИзменении(Элемент)
	
	УстановитьОформлениеЭлементаГруппаLDAPАвторизация();
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаГруппаСерверCMP

&НаКлиенте
Процедура CMPИспользоватьПриИзменении(Элемент)
	
	УстановитьОформлениеЭлементаГруппаCMPНастройки();
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаГруппаТестКлюча

&НаКлиенте
Процедура ФайлКлючаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Заголовок = Нстр("ru = 'Выберите файл ключа'; uk = 'Виберіть файл ключа'");;
	ДиалогВыбораФайла.Каталог = ФайлКлюча;
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ФайлКлючаНачалоВыбораПосле", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлКлючаНачалоВыбораПосле(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	ПутьКфайлуКлюча = Результат[0];
	
	ФайлКлюча = ПутьКфайлуКлюча;
	ФайлКлючаДляПодписи = ПутьКфайлуКлюча;
	ФайлКлючаДляШифрования = ПутьКфайлуКлюча;

КонецПроцедуры

&НаКлиенте
Процедура ПарольКлючаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Элемент.РежимПароля Тогда
		Элемент.РежимПароля = Ложь;
		Элемент.КартинкаКнопкиВыбора = БиблиотекаКартинок.СкрытьПароль;
		Возврат;
	КонецЕсли;
	
	Если Не Элемент.РежимПароля Тогда
		Элемент.РежимПароля = Истина;
		Элемент.КартинкаКнопкиВыбора = БиблиотекаКартинок.ПоказатьПароль;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПарольКлючаПриИзменении(Элемент)
	
	ПарольКлючаДляПодписи = ПарольКлюча;
	ПарольКлючаДляШифрования = ПарольКлюча;
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаГруппаТестСертификата

&НаКлиенте
Процедура ФайлСертификатаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Заголовок = Нстр("ru = 'Выберите файл сертификата'; uk = 'Виберіть файл сертифіката'");;
	ДиалогВыбораФайла.Каталог = ФайлКлюча;
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ФайлСертификатаНачалоВыбораПосле", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлСертификатаНачалоВыбораПосле(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	ФайлСертификата = Результат[0];	

КонецПроцедуры

#КонецОбласти

#Область СтраницаГруппаТестПодписи

&НаКлиенте
Процедура ФайлКлючаДляПодписиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Заголовок = Нстр("ru = 'Выберите файл ключа'; uk = 'Виберіть файл ключа'");;
	ДиалогВыбораФайла.Каталог = ФайлКлюча;
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ФайлКлючаДляПодписиНачалоВыбораПосле", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлКлючаДляПодписиНачалоВыбораПосле(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	ФайлКлючаДляПодписи = Результат[0];	

КонецПроцедуры


&НаКлиенте
Процедура ПарольКлючаДляПодписиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	Если Элемент.РежимПароля Тогда
		Элемент.РежимПароля = Ложь;
		Элемент.КартинкаКнопкиВыбора = БиблиотекаКартинок.СкрытьПароль;
		Возврат;
	КонецЕсли;
	
	Если Не Элемент.РежимПароля Тогда
		Элемент.РежимПароля = Истина;
		Элемент.КартинкаКнопкиВыбора = БиблиотекаКартинок.ПоказатьПароль;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ФайлНаПодписьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Заголовок = Нстр("ru = 'Выберите файл для подписи'; uk = 'Виберіть файл для підпису'");;
	ДиалогВыбораФайла.Каталог = ФайлКлюча;
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ФайлНаПодписьНачалоВыбораПосле", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлНаПодписьНачалоВыбораПосле(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	ФайлНаПодпись = Результат[0];	

КонецПроцедуры


&НаКлиенте
Процедура ПодписанныйФайлНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Заголовок = Нстр("ru = 'Выберите файл для проверки подписи'; uk = 'Виберіть файл для перевірки підпису'");;
	ДиалогВыбораФайла.Каталог = ФайлКлюча;
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ПодписанныйФайлНачалоВыбораПосле", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписанныйФайлНачалоВыбораПосле(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	ПодписанныйФайл = Результат[0];	

КонецПроцедуры


&НаКлиенте
Процедура ФорматПодписиПриИзменении(Элемент)
	
	УстановитьОформлениеЭлементаВключатьСертификатПодписантаВоВнутреннююПодпись();
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаГруппаТестШифрования

&НаКлиенте
Процедура ФайлКлючаДляШифрованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Заголовок = Нстр("ru = 'Выберите файл ключа'; uk = 'Виберіть файл ключа'");;
	ДиалогВыбораФайла.Каталог = ФайлКлюча;
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ФайлКлючаДляШифрованияНачалоВыбораПосле", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлКлючаДляШифрованияНачалоВыбораПосле(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	ФайлКлючаДляШифрования = Результат[0];	

КонецПроцедуры


&НаКлиенте
Процедура ПарольКлючаДляШифрованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	Если Элемент.РежимПароля Тогда
		Элемент.РежимПароля = Ложь;
		Элемент.КартинкаКнопкиВыбора = БиблиотекаКартинок.СкрытьПароль;
		Возврат;
	КонецЕсли;
	
	Если Не Элемент.РежимПароля Тогда
		Элемент.РежимПароля = Истина;
		Элемент.КартинкаКнопкиВыбора = БиблиотекаКартинок.ПоказатьПароль;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ФайлНаШифрованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Заголовок = Нстр("ru = 'Выберите файл для шифрования'; uk = 'Виберіть файл для шифрування'");;
	ДиалогВыбораФайла.Каталог = ФайлКлюча;
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ФайлНаШифрованиеНачалоВыбораПосле", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлНаШифрованиеНачалоВыбораПосле(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	ФайлНаШифрование = Результат[0];	

КонецПроцедуры


&НаКлиенте
Процедура ФайлСертификатаПолучателяЗашифрованныхДанныхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Заголовок = Нстр("ru = 'Выберите файл сертификата получателя'; uk = 'Виберіть файл сертифіката одержувача'");;
	ДиалогВыбораФайла.Каталог = ФайлКлюча;
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ФайлСертификатаПолучателяЗашифрованныхДанныхНачалоВыбораПосле", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлСертификатаПолучателяЗашифрованныхДанныхНачалоВыбораПосле(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	ФайлСертификатаПолучателяЗашифрованныхДанных = Результат[0];	

КонецПроцедуры

#КонецОбласти

#Область СтраницаГруппаBase64

&НаКлиенте
Процедура ФайлBase64НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Заголовок = Нстр("ru = 'Выберите файл'; uk = 'Виберіть файл'");;
	ДиалогВыбораФайла.Каталог = ФайлКлюча;
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ФайлBase64НачалоВыбораПосле", ЭтотОбъект));	
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлBase64НачалоВыбораПосле(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	ФайлBase64 = Результат[0];	

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтраницаГруппаБиблиотека

&НаКлиенте
Процедура КомандаУстановитьБиблиотеку(Команда)

	// Проверка
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(КаталогБиблиотеки) Тогда
		СообщитьПользователю(ТекстОшибкиЗаполнения(,, НСтр("ru = 'Каталог библиотеки'; uk = 'Каталог бібліотеки'")),,
			"КаталогБиблиотеки",, Отказ);	
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;	
	КонецЕсли;
	
	// Выполнение действия
	БиблиотекаУстановлена = Ложь;

	Если РежимВыполненияКомандыНаКлиенте() Тогда
		КомандаУстановитьБиблиотекуВКонтекстеКлиента(БиблиотекаУстановлена);	
	КонецЕсли;
	
	Если РежимВыполненияКомандыНаСервере() Тогда
		КомандаУстановитьБиблиотекуВКонтекстеСервера(БиблиотекаУстановлена);	
	КонецЕсли;
	
	// Оповещение о результате
	Если БиблиотекаУстановлена Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Успешно'; uk = 'Успішно'"),,
			НСтр("ru = 'Криптографическая библиотека успешно установлена';
				|uk = 'Криптографічна бібліотека успішно встановлена'"),
			БиблиотекаКартинок.ДиалогИнформация,
			СтатусОповещенияПользователя.Информация);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьБиблиотекуВКонтекстеКлиента(БиблиотекаУстановлена = Ложь)

	Попытка
	
		// Сохранение архива
		ОписаниеУстановочногоФайла = ПолучитьОписаниеАрхиваБиблиотеки(ПолучитьТипПлатформы(Истина));
		ИмяВременногоАрхива = ПолучитьИмяВременногоФайла(ОписаниеУстановочногоФайла.Расширение);
		ОписаниеУстановочногоФайла.ДвоичныеДанные.Записать(ИмяВременногоАрхива);
		
		// Распаковка архива
		ПроверитьСоздатьКаталог(КаталогБиблиотеки);
		Архив = Новый ЧтениеZipФайла(ИмяВременногоАрхива);
		Архив.ИзвлечьВсе(КаталогБиблиотеки, РежимВосстановленияПутейФайловZIP.Восстанавливать);		
		
		БиблиотекаУстановлена = Истина;
	Исключение
		ВызватьИсключение ОписаниеОшибки();	
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура КомандаУстановитьБиблиотекуВКонтекстеСервера(БиблиотекаУстановлена = Ложь)

	Попытка
	
		// Сохранение архива
		ОписаниеУстановочногоФайла = ПолучитьОписаниеАрхиваБиблиотеки(ПолучитьТипПлатформы());
		ИмяВременногоАрхива = ПолучитьИмяВременногоФайла(ОписаниеУстановочногоФайла.Расширение);
		ОписаниеУстановочногоФайла.ДвоичныеДанные.Записать(ИмяВременногоАрхива);
		
		// Распаковка архива
		ПроверитьСоздатьКаталог(КаталогБиблиотеки);
		Архив = Новый ЧтениеZipФайла(ИмяВременногоАрхива);
		Архив.ИзвлечьВсе(КаталогБиблиотеки, РежимВосстановленияПутейФайловZIP.Восстанавливать);

		БиблиотекаУстановлена = Истина;
	Исключение
		ВызватьИсключение ОписаниеОшибки();	
	КонецПопытки;
	
КонецПроцедуры


&НаКлиенте
Процедура КомандаВерсияБиблиотеки(Команда)
	
	ВерсияБиблиотеки = "";
	
	Если РежимВыполненияКомандыНаКлиенте() Тогда
		КомандаВерсияБиблиотекиВКонтекстеКлиента(ВерсияБиблиотеки);	
	КонецЕсли;
	
	Если РежимВыполненияКомандыНаСервере() Тогда
		КомандаВерсияБиблиотекиВКонтекстеСервера(ВерсияБиблиотеки);	
	КонецЕсли;
	
	// Оповещение орезультате
	Если ЗначениеЗаполнено(ВерсияБиблиотеки) Тогда
		Сообщить(ВерсияБиблиотеки);
	Иначе
		// Неудача
		Сообщить(НСтр("ru = 'Не удалось прочитать версию криптографической библиотеки';
			|uk = 'Не вдалося прочитати версію криптографічної бібліотеки'"));	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВерсияБиблиотекиВКонтекстеКлиента(ВерсияБиблиотеки = "")

	Библиотека = EUSignКлиентСервер.ПолучитьОбъектБиблиотеки();
	ВерсияБиблиотеки = EUSignКлиентСервер.ВерсияБиблиотеки(Библиотека);
	EUSignКлиентСервер.ЗавершитьРаботуБиблиотеки(Библиотека);
	
КонецПроцедуры

&НаСервере
Процедура КомандаВерсияБиблиотекиВКонтекстеСервера(ВерсияБиблиотеки = "")

	Библиотека = EUSignКлиентСервер.ПолучитьОбъектБиблиотеки();
	ВерсияБиблиотеки = EUSignКлиентСервер.ВерсияБиблиотеки(Библиотека);
	EUSignКлиентСервер.ЗавершитьРаботуБиблиотеки(Библиотека);
	
КонецПроцедуры


&НаКлиенте
Процедура КомандаЗарегистрироватьБиблиотеку(Команда)

	Если РежимВыполненияКомандыНаКлиенте() Тогда
		КомандаЗарегистрироватьБиблиотекуВКонтекстеКлиента();	
	КонецЕсли;
	
	Если РежимВыполненияКомандыНаСервере() Тогда
		КомандаЗарегистрироватьБиблиотекуВКонтекстеСервера();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗарегистрироватьБиблиотекуВКонтекстеКлиента()

	КомандаРегистрации = ПолучитьКомандуРегистрацииБиблиотеки();
	//ЗапуститьПриложение(КомандаРегистрации,, Истина);
	НачатьЗапускПриложения(Новый ОписаниеОповещения("КомандаЗарегистрироватьБиблиотекуВКонтекстеКлиентаПосле", ЭтотОбъект),
		КомандаРегистрации,, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗарегистрироватьБиблиотекуВКонтекстеКлиентаПосле(КодВозврата, ДополнительныеПараметры) Экспорт
//
КонецПроцедуры

&НаСервере
Процедура КомандаЗарегистрироватьБиблиотекуВКонтекстеСервера()

	КомандаРегистрации = ПолучитьКомандуРегистрацииБиблиотеки();
	ЗапуститьПриложение(КомандаРегистрации,, Истина);
	
КонецПроцедуры


&НаКлиенте
Процедура КомандаРазрегистрироватьБиблиотеку(Команда)

	Если РежимВыполненияКомандыНаКлиенте() Тогда
		КомандаРазрегистрироватьБиблиотекуВКонтекстеКлиента();	
	КонецЕсли;
	
	Если РежимВыполненияКомандыНаСервере() Тогда
		КомандаРазрегистрироватьБиблиотекуВКонтекстеСервера();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаРазрегистрироватьБиблиотекуВКонтекстеКлиента()

	КомандаРегистрации = ПолучитьКомандуРазрегистрацииБиблиотеки();
	ЗапуститьПриложение(КомандаРегистрации,, Истина);
	
КонецПроцедуры

&НаСервере
Процедура КомандаРазрегистрироватьБиблиотекуВКонтекстеСервера()

	КомандаРегистрации = ПолучитьКомандуРазрегистрацииБиблиотеки();
	ЗапуститьПриложение(КомандаРегистрации,, Истина);
	
КонецПроцедуры


&НаКлиенте
Процедура КомандаОбновитьНастройкиАЦСК(Команда)
	
	ЗаполнитьТаблицуНастроекВсехАЦСК();
	
КонецПроцедуры


&НаКлиенте
Процедура КомандаУстановитьПараметрыАЦСК(Команда)

	// Заполение настроек на основании выбранного АЦСК
	АктивныеНастройкиНайдены = ТаблицаНастроекАЦСК.НайтиСтроки(Новый Структура("Пометка", Истина)).Количество() > 0;
	ЗаполнитьНастройкиПоТекущемуАЦСК();
	
	// Проверка
	Отказ = Ложь;
	Если Не АктивныеНастройкиНайдены Тогда
		СообщитьПользователю(НСтр("ru = 'Нет активных настроек АЦСК'; uk = 'Немає активних налаштувань АЦСК'"),,
			"ТаблицаНастроекАЦСК",, Отказ);	
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;	
	КонецЕсли;
	
	// Выполнение действия	
	НастройкиУстановлены = Ложь;
	
	Если РежимВыполненияКомандыНаКлиенте() Тогда
		КомандаУстановитьПараметрыАЦСКВКонтекстеКлиента(НастройкиУстановлены);
	КонецЕсли;
	
	Если РежимВыполненияКомандыНаСервере() Тогда
		КомандаУстановитьПараметрыАЦСКВКонтекстеСервера(НастройкиУстановлены);	
	КонецЕсли;

	// Оповещение о результате
	Если НастройкиУстановлены Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Успешно'; uk = 'Успішно'"),,
			НСтр("ru = 'Настройки АЦСК установлены'; uk = 'Налаштування АЦСК встановлено'"),,
			СтатусОповещенияПользователя.Информация);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьПараметрыАЦСКВКонтекстеКлиента(НастройкиУстановлены = Ложь)

	Библиотека = EUSignКлиентСервер.ПолучитьОбъектБиблиотеки();
	Попытка

		EUSignКлиентСервер.УстановитьРежимВзаимодействияАЦСК(Библиотека, РежимВзаимодействияАЦСК);

		EUSignКлиентСервер.УстановитьПараметрыTSP(Библиотека,
			TSPИспользовать,
			TSPАдресСервера,
			TSPПорт);

		EUSignКлиентСервер.УстановитьПараметрыOCSP(Библиотека,
			OCSPИспользовать,
			OCSPАдресСервера,
			OCSPПорт,
			OCSPПроверятьПередПроверкойВХранилище);
			
		EUSignКлиентСервер.УстановитьПараметрыLDAP(Библиотека,
			LDAPИспользовать,
			LDAPАдресСервера,
			LDAPПорт,
			LDAPАнонимный,
			LDAPПользователь,
			LDAPПароль);

		EUSignКлиентСервер.УстановитьПараметрыCMP(Библиотека,
			CMPИспользовать,
			CMPАдресСервера,
			CMPПорт,
			CMPРеквизитСертификатаНаименованиеОрганизации);

		НастройкиУстановлены = Истина;	
	Исключение
		ТекстОшибкиИзБиблиотеки = EUSignКлиентСервер.ПоследняяОшибкаБиблиотеки(Библиотека);
		EUSignКлиентСервер.ЗавершитьРаботуБиблиотеки(Библиотека);
		ВызватьИсключение ТекстОшибкиИзБиблиотеки;
	КонецПопытки;

	EUSignКлиентСервер.ЗавершитьРаботуБиблиотеки(Библиотека);
	
КонецПроцедуры

&НаСервере
Процедура КомандаУстановитьПараметрыАЦСКВКонтекстеСервера(НастройкиУстановлены = Ложь)

	Библиотека = EUSignКлиентСервер.ПолучитьОбъектБиблиотеки();
	Попытка

		EUSignКлиентСервер.УстановитьРежимВзаимодействияАЦСК(Библиотека, РежимВзаимодействияАЦСК);

		EUSignКлиентСервер.УстановитьПараметрыTSP(Библиотека,
			TSPИспользовать,
			TSPАдресСервера,
			TSPПорт);

		EUSignКлиентСервер.УстановитьПараметрыOCSP(Библиотека,
			OCSPИспользовать,
			OCSPАдресСервера,
			OCSPПорт,
			OCSPПроверятьПередПроверкойВХранилище);
			
		EUSignКлиентСервер.УстановитьПараметрыLDAP(Библиотека,
			LDAPИспользовать,
			LDAPАдресСервера,
			LDAPПорт,
			LDAPАнонимный,
			LDAPПользователь,
			LDAPПароль);

		EUSignКлиентСервер.УстановитьПараметрыCMP(Библиотека,
			CMPИспользовать,
			CMPАдресСервера,
			CMPПорт,
			CMPРеквизитСертификатаНаименованиеОрганизации);
			
		НастройкиУстановлены = Истина;
	Исключение
		ТекстОшибкиИзБиблиотеки = EUSignКлиентСервер.ПоследняяОшибкаБиблиотеки(Библиотека);
		EUSignКлиентСервер.ЗавершитьРаботуБиблиотеки(Библиотека);
		ВызватьИсключение ТекстОшибкиИзБиблиотеки;
	КонецПопытки;

	EUSignКлиентСервер.ЗавершитьРаботуБиблиотеки(Библиотека);	
	
КонецПроцедуры


&НаКлиенте
Процедура КомандаУстановитьРежимВзаимодействияАЦСК(Команда)
	
	// Выполнение действия	
	НастройкиУстановлены = Ложь;
	
	Если РежимВыполненияКомандыНаКлиенте() Тогда
		РежимВзаимодействияАЦСКВКонтекстеКлиента(НастройкиУстановлены);
	КонецЕсли;
	
	Если РежимВыполненияКомандыНаСервере() Тогда
		РежимВзаимодействияАЦСКВКонтекстеСервера(НастройкиУстановлены);	
	КонецЕсли;

	// Оповещение о результате
	Если НастройкиУстановлены Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Успешно'; uk = 'Успішно'"),,
			НСтр("ru = 'Режим взаимодействия с АЦСК установлен'; uk = 'Режим взаємодії з АЦСК встановлено'"),,
			СтатусОповещенияПользователя.Информация);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РежимВзаимодействияАЦСКВКонтекстеКлиента(НастройкиУстановлены = Ложь)

	Библиотека = EUSignКлиентСервер.ПолучитьОбъектБиблиотеки();
	Попытка
		EUSignКлиентСервер.УстановитьРежимВзаимодействияАЦСК(Библиотека,
			EUSignКлиентСерверПовтИсп.РежимВзаимодействияАЦСК(РежимВзаимодействияАЦСК));
		НастройкиУстановлены = Истина;	
	Исключение
		ТекстОшибкиИзБиблиотеки = EUSignКлиентСервер.ПоследняяОшибкаБиблиотеки(Библиотека);
		EUSignКлиентСервер.ЗавершитьРаботуБиблиотеки(Библиотека);
		ВызватьИсключение ТекстОшибкиИзБиблиотеки;
	КонецПопытки;

	EUSignКлиентСервер.ЗавершитьРаботуБиблиотеки(Библиотека);
	
КонецПроцедуры

&НаСервере
Процедура РежимВзаимодействияАЦСКВКонтекстеСервера(НастройкиУстановлены = Ложь)

	Библиотека = EUSignКлиентСервер.ПолучитьОбъектБиблиотеки();
	Попытка
		EUSignКлиентСервер.УстановитьРежимВзаимодействияАЦСК(Библиотека,
			EUSignКлиентСерверПовтИсп.РежимВзаимодействияАЦСК(РежимВзаимодействияАЦСК));
		НастройкиУстановлены = Истина;	
	Исключение
		ТекстОшибкиИзБиблиотеки = EUSignКлиентСервер.ПоследняяОшибкаБиблиотеки(Библиотека);
		EUSignКлиентСервер.ЗавершитьРаботуБиблиотеки(Библиотека);
		ВызватьИсключение ТекстОшибкиИзБиблиотеки;
	КонецПопытки;

	EUSignКлиентСервер.ЗавершитьРаботуБиблиотеки(Библиотека);	
	
КонецПроцедуры


&НаКлиенте
Процедура КомандаИнтерфейсНастроек(Команда)

	Если РежимВыполненияКомандыНаКлиенте() Тогда
		КомандаИнтерфейсНастроекВКонтекстеКлиента();	
	КонецЕсли;
	
	Если РежимВыполненияКомандыНаСервере() Тогда
		КомандаИнтерфейсНастроекВКонтекстеСервера();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаИнтерфейсНастроекВКонтекстеКлиента()

	Библиотека = EUSignКлиентСервер.ПолучитьОбъектБиблиотеки();
	EUSignКлиентСервер.ИнтерфейсУстановкиНастроек(Библиотека);
	EUSignКлиентСервер.ЗавершитьРаботуБиблиотеки(Библиотека);
	
КонецПроцедуры

&НаСервере
Процедура КомандаИнтерфейсНастроекВКонтекстеСервера()

	Библиотека = EUSignКлиентСервер.ПолучитьОбъектБиблиотеки();
	EUSignКлиентСервер.ИнтерфейсУстановкиНастроек(Библиотека);
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаГруппаХранилище

&НаКлиенте
Процедура КомандаЗагрузитьСертификатыАЦСК(Команда)

	ФайлСертифкатовВсехФЦСК = "";
	
	Если РежимВыполненияКомандыНаКлиенте() Тогда
		КомандаЗагрузитьСертификатыАЦСКВКонтекстеКлиента(ФайлСертифкатовВсехФЦСК);	
	КонецЕсли;
	
	Если РежимВыполненияКомандыНаСервере() Тогда
		КомандаЗагрузитьСертификатыАЦСКВКонтекстеСервера(ФайлСертифкатовВсехФЦСК);	
	КонецЕсли;	
	
	// Оповещение орезультате
	ФайлИнфо = Новый Файл(ФайлСертифкатовВсехФЦСК);	
	ФайлИнфо.НачатьПроверкуСуществования(Новый ОписаниеОповещения("КомандаЗагрузитьСертификатыАЦСКЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗагрузитьСертификатыАЦСКЗавершение(Существует, ДополнительныеПараметры) Экспорт
	
	Если Существует Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Успешно'; uk = 'Успішно'"),,
			НСтр("ru = 'Файл сертификатов всех АЦСК успешно загружен';
				|uk = 'Файл сертифікатів усіх АЦСК успішно завантажено'"),
			БиблиотекаКартинок.ДиалогИнформация,
			СтатусОповещенияПользователя.Информация);
	Иначе
		ПоказатьОповещениеПользователя(НСтр("ru = 'Ошибка'; uk = 'Помилка'"),,
			НСтр("ru = 'Файл сертификатов всех АЦСК не загружен';
				|uk = 'Файл сертифікатів усіх АЦСК не завантажено'"),
			БиблиотекаКартинок.ДиалогВосклицание,
			СтатусОповещенияПользователя.Важное);
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура КомандаЗагрузитьСертификатыАЦСКВКонтекстеКлиента(ФайлСертифкатовВсехФЦСК = "")

	// Сохранение файла
	ОписаниеФайлаСертификатовВсехАЦСК = ПолучитьОписаниеФайлаСертификатовВсехАЦСК();
	ФайлСертифкатовВсехФЦСК = СформироватьПолноеИмяФайла(КаталогХранилища, ОписаниеФайлаСертификатовВсехАЦСК.ИмяФайлаСРаширением);
	ОписаниеФайлаСертификатовВсехАЦСК.ДвоичныеДанные.Записать(ФайлСертифкатовВсехФЦСК);
	
КонецПроцедуры

&НаСервере
Процедура КомандаЗагрузитьСертификатыАЦСКВКонтекстеСервера(ФайлСертифкатовВсехФЦСК = "")

	// Сохранение файла
	ОписаниеФайлаСертификатовВсехАЦСК = ПолучитьОписаниеФайлаСертификатовВсехАЦСК();
	ФайлСертифкатовВсехФЦСК = СформироватьПолноеИмяФайла(КаталогХранилища, ОписаниеФайлаСертификатовВсехАЦСК.ИмяФайлаСРаширением);
	ОписаниеФайлаСертификатовВсехАЦСК.ДвоичныеДанные.Записать(ФайлСертифкатовВсехФЦСК);
	
КонецПроцедуры


&НаКлиенте
Процедура КомандаУстановитьПараметрыХранилища(Команда)

	// Проверка
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(КаталогХранилища) Тогда
		СообщитьПользователю(ТекстОшибкиЗаполнения(,, НСтр("ru = 'Каталог хранилища'; uk = 'Каталог сховища'")),,
			"КаталогХранилища",, Отказ);	
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;	
	КонецЕсли;
	
	// Выполнение действия
	НастройкиУстановлены = Ложь;
	
	Если РежимВыполненияКомандыНаКлиенте() Тогда
		КомандаУстановитьПараметрыХранилищаВКонтекстеКлиента(НастройкиУстановлены);	
	КонецЕсли;
	
	Если РежимВыполненияКомандыНаСервере() Тогда
		КомандаУстановитьПараметрыХранилищаВКонтекстеСервера(НастройкиУстановлены);	
	КонецЕсли;
	
	// Оповещение о результате
	Если НастройкиУстановлены Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Успешно'; uk = 'Успішно'"),,
			НСтр("ru = 'Настройки хранилища установлены'; uk = 'Налаштування сховища встановлено'"),,
			СтатусОповещенияПользователя.Информация);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьПараметрыХранилищаВКонтекстеКлиента(НастройкиУстановлены = Ложь)

	ПроверитьСоздатьКаталог(КаталогХранилища);

	Библиотека = EUSignКлиентСервер.ПолучитьОбъектБиблиотеки();	
	Попытка
	
		EUSignКлиентСервер.УстановитьПараметрыФайловогоХранилища(Библиотека,
			КаталогХранилища,
			АвтоматическиПеречитыватьПриИзмененииВФайловомХранилище,
			АвтоматическиСохранятьСертификатыВФайловоеХранилище,
			ВремяХраненияСостоянияПроверенногоСертификата,
			ПроверятьСписокОтозванныхСертификатов,
			ПроверятьСписокОтозванныхСертификатовТолькоСвоегоЦСК,
			ПроверятьСписокОтозванныхСертификатовПолныйИЧастичный,
			АвтоматическиЗагружатьСписокОтозванныхСертификатов);		
	
		НастройкиУстановлены = Истина;
	Исключение
		ТекстОшибкиИзБиблиотеки = EUSignКлиентСервер.ПоследняяОшибкаБиблиотеки(Библиотека);
		EUSignКлиентСервер.ЗавершитьРаботуБиблиотеки(Библиотека);
		ВызватьИсключение ТекстОшибкиИзБиблиотеки;
	КонецПопытки;
	
	EUSignКлиентСервер.ЗавершитьРаботуБиблиотеки(Библиотека);
	
КонецПроцедуры

&НаСервере
Процедура КомандаУстановитьПараметрыХранилищаВКонтекстеСервера(НастройкиУстановлены = Ложь)

	ПроверитьСоздатьКаталог(КаталогХранилища);

	Библиотека = EUSignКлиентСервер.ПолучитьОбъектБиблиотеки();	
	Попытка
	
		EUSignКлиентСервер.УстановитьПараметрыФайловогоХранилища(Библиотека,
			КаталогХранилища,
			АвтоматическиПеречитыватьПриИзмененииВФайловомХранилище,
			АвтоматическиСохранятьСертификатыВФайловоеХранилище,
			ВремяХраненияСостоянияПроверенногоСертификата,
			ПроверятьСписокОтозванныхСертификатов,
			ПроверятьСписокОтозванныхСертификатовТолькоСвоегоЦСК,
			ПроверятьСписокОтозванныхСертификатовПолныйИЧастичный,
			АвтоматическиЗагружатьСписокОтозванныхСертификатов);		
	
		НастройкиУстановлены = Истина;
	Исключение
		ТекстОшибкиИзБиблиотеки = EUSignКлиентСервер.ПоследняяОшибкаБиблиотеки(Библиотека);
		EUSignКлиентСервер.ЗавершитьРаботуБиблиотеки(Библиотека);
		ВызватьИсключение ТекстОшибкиИзБиблиотеки;
	КонецПопытки;
	
	EUSignКлиентСервер.ЗавершитьРаботуБиблиотеки(Библиотека);
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаГруппаProxy

&НаКлиенте
Процедура КомандаУстановитьПараметрыProxy(Команда)

	// Выполнение действия
	НастройкиУстановлены = Ложь;
	
	Если РежимВыполненияКомандыНаКлиенте() Тогда
		КомандаУстановитьПараметрыProxyВКонтекстеКлиента(НастройкиУстановлены);	
	КонецЕсли;
	
	Если РежимВыполненияКомандыНаСервере() Тогда
		КомандаУстановитьПараметрыProxyВКонтекстеСервера(НастройкиУстановлены);	
	КонецЕсли;
	
	// Оповещение о результате
	Если НастройкиУстановлены Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Успешно'; uk = 'Успішно'"),,
			НСтр("ru = 'Настройки Proxy установлены'; uk = 'Налаштування Proxy встановлено'"),,
			СтатусОповещенияПользователя.Информация);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьПараметрыProxyВКонтекстеКлиента(НастройкиУстановлены = Ложь)

	Библиотека = EUSignКлиентСервер.ПолучитьОбъектБиблиотеки();	
	Попытка
	
		EUSignКлиентСервер.УстановитьПараметрыProxy(Библиотека,
			ProxyИспользовать,
			ProxyАдресСервера,
			ProxyПорт,
			ProxyАнонимный,
			ProxyПользователь,
			ProxyПароль,
			ProxyСохранитьПароль);

		НастройкиУстановлены = Истина;
	Исключение
		ТекстОшибкиИзБиблиотеки = EUSignКлиентСервер.ПоследняяОшибкаБиблиотеки(Библиотека);
		EUSignКлиентСервер.ЗавершитьРаботуБиблиотеки(Библиотека);
		ВызватьИсключение ТекстОшибкиИзБиблиотеки;
	КонецПопытки;
	
	EUSignКлиентСервер.ЗавершитьРаботуБиблиотеки(Библиотека);
	
КонецПроцедуры

&НаСервере
Процедура КомандаУстановитьПараметрыProxyВКонтекстеСервера(НастройкиУстановлены = Ложь)

	Библиотека = EUSignКлиентСервер.ПолучитьОбъектБиблиотеки();	
	Попытка
	
		EUSignКлиентСервер.УстановитьПараметрыProxy(Библиотека,
			ProxyИспользовать,
			ProxyАдресСервера,
			ProxyПорт,
			ProxyАнонимный,
			ProxyПользователь,
			ProxyПароль,
			ProxyСохранитьПароль);

		НастройкиУстановлены = Истина;
	Исключение
		ТекстОшибкиИзБиблиотеки = EUSignКлиентСервер.ПоследняяОшибкаБиблиотеки(Библиотека);
		EUSignКлиентСервер.ЗавершитьРаботуБиблиотеки(Библиотека);
		ВызватьИсключение ТекстОшибкиИзБиблиотеки;
	КонецПопытки;
	
	EUSignКлиентСервер.ЗавершитьРаботуБиблиотеки(Библиотека);	
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаГруппаСерверTSP

&НаКлиенте
Процедура КомандаУстановитьПараметрыTSP(Команда)

	// Выполнение действия
	НастройкиУстановлены = Ложь;
	
	Если РежимВыполненияКомандыНаКлиенте() Тогда
		КомандаУстановитьПараметрыTSPВКонтекстеКлиента(НастройкиУстановлены);	
	КонецЕсли;
	
	Если РежимВыполненияКомандыНаСервере() Тогда
		КомандаУстановитьПараметрыTSPВКонтекстеСервера(НастройкиУстановлены);	
	КонецЕсли;
	
	// Оповещение о результате
	Если НастройкиУстановлены Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Успешно'; uk = 'Успішно'"),,
			НСтр("ru = 'Настройки TSP установлены'; uk = 'Налаштування TSP встановлено'"),,
			СтатусОповещенияПользователя.Информация);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьПараметрыTSPВКонтекстеКлиента(НастройкиУстановлены = Ложь)

	Библиотека = EUSignКлиентСервер.ПолучитьОбъектБиблиотеки();	
	Попытка
	
		EUSignКлиентСервер.УстановитьПараметрыTSP(Библиотека,
			TSPИспользовать,
			TSPАдресСервера,
			TSPПорт);
		
		НастройкиУстановлены = Истина;
	Исключение
		ТекстОшибкиИзБиблиотеки = EUSignКлиентСервер.ПоследняяОшибкаБиблиотеки(Библиотека);
		EUSignКлиентСервер.ЗавершитьРаботуБиблиотеки(Библиотека);
		ВызватьИсключение ТекстОшибкиИзБиблиотеки;
	КонецПопытки;
	
	EUSignКлиентСервер.ЗавершитьРаботуБиблиотеки(Библиотека);
	
КонецПроцедуры

&НаСервере
Процедура КомандаУстановитьПараметрыTSPВКонтекстеСервера(НастройкиУстановлены = Ложь)

	Библиотека = EUSignКлиентСервер.ПолучитьОбъектБиблиотеки();
	Попытка
	
		EUSignКлиентСервер.УстановитьПараметрыTSP(Библиотека,
			TSPИспользовать,
			TSPАдресСервера,
			TSPПорт);
		
		НастройкиУстановлены = Истина;
	Исключение
		ТекстОшибкиИзБиблиотеки = EUSignКлиентСервер.ПоследняяОшибкаБиблиотеки(Библиотека);
		EUSignКлиентСервер.ЗавершитьРаботуБиблиотеки(Библиотека);
		ВызватьИсключение ТекстОшибкиИзБиблиотеки;
	КонецПопытки;
	
	EUSignКлиентСервер.ЗавершитьРаботуБиблиотеки(Библиотека);	
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаГруппаСерверOCSP

&НаКлиенте
Процедура КомандаУстановитьПараметрыOCSP(Команда)

	// Выполнение действия
	НастройкиУстановлены = Ложь;
	
	Если РежимВыполненияКомандыНаКлиенте() Тогда
		КомандаУстановитьПараметрыOCSPВКонтекстеКлиента(НастройкиУстановлены);	
	КонецЕсли;
	
	Если РежимВыполненияКомандыНаСервере() Тогда
		КомандаУстановитьПараметрыOCSPВКонтекстеСервера(НастройкиУстановлены);	
	КонецЕсли;

	// Оповещение о результате
	Если НастройкиУстановлены Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Успешно'; uk = 'Успішно'"),,
			НСтр("ru = 'Настройки OCSP установлены'; uk = 'Налаштування OCSP встановлено'"),,
			СтатусОповещенияПользователя.Информация);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьПараметрыOCSPВКонтекстеКлиента(НастройкиУстановлены = Ложь)

	Библиотека = EUSignКлиентСервер.ПолучитьОбъектБиблиотеки();
	Попытка

		EUSignКлиентСервер.УстановитьПараметрыOCSP(Библиотека,
			OCSPИспользовать,
			OCSPАдресСервера,
			OCSPПорт,
			OCSPПроверятьПередПроверкойВХранилище);

		НастройкиУстановлены = Истина;
	Исключение
		ТекстОшибкиИзБиблиотеки = EUSignКлиентСервер.ПоследняяОшибкаБиблиотеки(Библиотека);
		EUSignКлиентСервер.ЗавершитьРаботуБиблиотеки(Библиотека);
		ВызватьИсключение ТекстОшибкиИзБиблиотеки;
	КонецПопытки;
	
	EUSignКлиентСервер.ЗавершитьРаботуБиблиотеки(Библиотека);
	
КонецПроцедуры

&НаСервере
Процедура КомандаУстановитьПараметрыOCSPВКонтекстеСервера(НастройкиУстановлены = Ложь)

	Библиотека = EUSignКлиентСервер.ПолучитьОбъектБиблиотеки();
	Попытка

		EUSignКлиентСервер.УстановитьПараметрыOCSP(Библиотека,
			OCSPИспользовать,
			OCSPАдресСервера,
			OCSPПорт,
			OCSPПроверятьПередПроверкойВХранилище);

		НастройкиУстановлены = Истина;
	Исключение
		ТекстОшибкиИзБиблиотеки = EUSignКлиентСервер.ПоследняяОшибкаБиблиотеки(Библиотека);
		EUSignКлиентСервер.ЗавершитьРаботуБиблиотеки(Библиотека);
		ВызватьИсключение ТекстОшибкиИзБиблиотеки;
	КонецПопытки;
	
	EUSignКлиентСервер.ЗавершитьРаботуБиблиотеки(Библиотека);	
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаГруппаСерверLDAP

&НаКлиенте
Процедура КомандаУстановитьПараметрыLDAP(Команда)

	// Выполнение действия
	НастройкиУстановлены = Ложь;
	
	Если РежимВыполненияКомандыНаКлиенте() Тогда
		КомандаУстановитьПараметрыLDAPВКонтекстеКлиента(НастройкиУстановлены);	
	КонецЕсли;
	
	Если РежимВыполненияКомандыНаСервере() Тогда
		КомандаУстановитьПараметрыLDAPВКонтекстеСервера(НастройкиУстановлены);	
	КонецЕсли;
	
	// Оповещение о результате
	Если НастройкиУстановлены Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Успешно'; uk = 'Успішно'"),,
			НСтр("ru = 'Настройки LDAP установлены'; uk = 'Налаштування LDAP встановлено'"),,
			СтатусОповещенияПользователя.Информация);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьПараметрыLDAPВКонтекстеКлиента(НастройкиУстановлены = Ложь)

	Библиотека = EUSignКлиентСервер.ПолучитьОбъектБиблиотеки();
	Попытка

		EUSignКлиентСервер.УстановитьПараметрыLDAP(Библиотека,
			LDAPИспользовать,
			LDAPАдресСервера,
			LDAPПорт,
			LDAPАнонимный,
			LDAPПользователь,
			LDAPПароль);

		НастройкиУстановлены = Истина;
	Исключение
		ТекстОшибкиИзБиблиотеки = EUSignКлиентСервер.ПоследняяОшибкаБиблиотеки(Библиотека);
		EUSignКлиентСервер.ЗавершитьРаботуБиблиотеки(Библиотека);
		ВызватьИсключение ТекстОшибкиИзБиблиотеки;
	КонецПопытки;
	
	EUSignКлиентСервер.ЗавершитьРаботуБиблиотеки(Библиотека);
	
КонецПроцедуры

&НаСервере
Процедура КомандаУстановитьПараметрыLDAPВКонтекстеСервера(НастройкиУстановлены = Ложь)

	Библиотека = EUSignКлиентСервер.ПолучитьОбъектБиблиотеки();
	Попытка

		EUSignКлиентСервер.УстановитьПараметрыLDAP(Библиотека,
			LDAPИспользовать,
			LDAPАдресСервера,
			LDAPПорт,
			LDAPАнонимный,
			LDAPПользователь,
			LDAPПароль);

		НастройкиУстановлены = Истина;
	Исключение
		ТекстОшибкиИзБиблиотеки = EUSignКлиентСервер.ПоследняяОшибкаБиблиотеки(Библиотека);
		EUSignКлиентСервер.ЗавершитьРаботуБиблиотеки(Библиотека);
		ВызватьИсключение ТекстОшибкиИзБиблиотеки;
	КонецПопытки;
	
	EUSignКлиентСервер.ЗавершитьРаботуБиблиотеки(Библиотека);	
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаГруппаСерверCMP

&НаКлиенте
Процедура КомандаУстановитьПараметрыCMP(Команда)

	// Выполнение действия
	НастройкиУстановлены = Ложь;
	
	Если РежимВыполненияКомандыНаКлиенте() Тогда
		КомандаУстановитьПараметрыCMPВКонтекстеКлиента(НастройкиУстановлены);	
	КонецЕсли;
	
	Если РежимВыполненияКомандыНаСервере() Тогда
		КомандаУстановитьПараметрыCMPВКонтекстеСервера(НастройкиУстановлены);	
	КонецЕсли;
	
	// Оповещение о результате
	Если НастройкиУстановлены Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Успешно'; uk = 'Успішно'"),,
			НСтр("ru = 'Настройки CMP установлены'; uk = 'Налаштування CMP встановлено'"),,
			СтатусОповещенияПользователя.Информация);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьПараметрыCMPВКонтекстеКлиента(НастройкиУстановлены = Ложь)

	Библиотека = EUSignКлиентСервер.ПолучитьОбъектБиблиотеки();	
	Попытка

		EUSignКлиентСервер.УстановитьПараметрыCMP(Библиотека,
			CMPИспользовать,
			CMPАдресСервера,
			CMPПорт,
			CMPРеквизитСертификатаНаименованиеОрганизации);

		НастройкиУстановлены = Истина;
	Исключение
		ТекстОшибкиИзБиблиотеки = EUSignКлиентСервер.ПоследняяОшибкаБиблиотеки(Библиотека);
		EUSignКлиентСервер.ЗавершитьРаботуБиблиотеки(Библиотека);
		ВызватьИсключение ТекстОшибкиИзБиблиотеки;
	КонецПопытки;
	
	EUSignКлиентСервер.ЗавершитьРаботуБиблиотеки(Библиотека);
	
КонецПроцедуры

&НаСервере
Процедура КомандаУстановитьПараметрыCMPВКонтекстеСервера(НастройкиУстановлены = Ложь)

	Библиотека = EUSignКлиентСервер.ПолучитьОбъектБиблиотеки();
	Попытка

		EUSignКлиентСервер.УстановитьПараметрыCMP(Библиотека,
			CMPИспользовать,
			CMPАдресСервера,
			CMPПорт,
			CMPРеквизитСертификатаНаименованиеОрганизации);

		НастройкиУстановлены = Истина;
	Исключение
		ТекстОшибкиИзБиблиотеки = EUSignКлиентСервер.ПоследняяОшибкаБиблиотеки(Библиотека);
		EUSignКлиентСервер.ЗавершитьРаботуБиблиотеки(Библиотека);
		ВызватьИсключение ТекстОшибкиИзБиблиотеки;
	КонецПопытки;
	
	EUSignКлиентСервер.ЗавершитьРаботуБиблиотеки(Библиотека);	
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаГруппаТестКлюча

&НаКлиенте
Процедура КомандаПрочитатьКлюч(Команда)

	// Проверка 
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(ФайлКлюча) Тогда
		СообщитьПользователю(ТекстОшибкиЗаполнения(,,
			НСтр("ru = 'Файл ключа'; uk = 'Файл ключа'")),,
			"ФайлКлюча",, Отказ);	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПарольКлюча) Тогда
		СообщитьПользователю(ТекстОшибкиЗаполнения(,,
			НСтр("ru = 'Пароль ключа'; uk = 'Пароль ключа'")),,
			"ПарольКлюча",, Отказ);	
	КонецЕсли;

	Если Отказ Тогда
		Возврат;	
	КонецЕсли;
	
	// Подготовка
	ТаблицаИнформацииОВладельцеКлюча.Очистить();
	
	// Выполнение действия
	КлючПрочитан = Ложь;
	ИдентификаторСертификатаКлюча = Неопределено;
	ИнформацияОВладельцеКлюча = Неопределено;
	
	Если РежимВыполненияКомандыНаКлиенте() Тогда
		КомандаПрочитатьКлючВКонтекстеКлиента(КлючПрочитан, ИдентификаторСертификатаКлюча, ИнформацияОВладельцеКлюча);	
	КонецЕсли;
	
	Если РежимВыполненияКомандыНаСервере() Тогда
		КомандаПрочитатьКлючВКонтекстеСервера(КлючПрочитан, ИдентификаторСертификатаКлюча, ИнформацияОВладельцеКлюча);	
	КонецЕсли;
	
	// Оповещение о результате
	Если КлючПрочитан Тогда

		Если ТипЗнч(ИнформацияОВладельцеКлюча) = Тип("Структура") Тогда
			ПоместитьСтруктуруВТаблицу(ТаблицаИнформацииОВладельцеКлюча, ИнформацияОВладельцеКлюча);
		КонецЕсли;

		ПоказатьОповещениеПользователя(НСтр("ru = 'Успешно'; uk = 'Успішно'"),,
			НСтр("ru = 'Ключ успешно прочитан'; uk = 'Ключ успішно прочитаний'"),,
			СтатусОповещенияПользователя.Информация);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПрочитатьКлючВКонтекстеКлиента(КлючПрочитан = Ложь,
	ИдентификаторСертификатаКлюча = Неопределено,
	ИнформацияОВладельцеКлюча = Неопределено)

	Библиотека = EUSignКлиентСервер.ПолучитьОбъектБиблиотеки();
	
	Попытка
		ИдентификаторСертификатаКлюча = EUSignКлиентСервер.ПрочитатьКлючИз(Библиотека, ФайлКлюча, ПарольКлюча);
		КлючПрочитан = EUSignКлиентСервер.КлючПрочитан(Библиотека);
		ИнформацияОВладельцеКлюча = EUSignКлиентСервер.ИнформацияОВладельцеКлюча(Библиотека);
		EUSignКлиентСервер.СброситьКлюч(Библиотека);
	Исключение
		ТекстОшибкиИзБиблиотеки = EUSignКлиентСервер.ПоследняяОшибкаБиблиотеки(Библиотека);
		EUSignКлиентСервер.ЗавершитьРаботуБиблиотеки(Библиотека);
		ВызватьИсключение ТекстОшибкиИзБиблиотеки;
	КонецПопытки;

	EUSignКлиентСервер.ЗавершитьРаботуБиблиотеки(Библиотека);
	
КонецПроцедуры

&НаСервере
Процедура КомандаПрочитатьКлючВКонтекстеСервера(КлючПрочитан = Ложь,
	ИдентификаторСертификатаКлюча = Неопределено,
	ИнформацияОВладельцеКлюча = Неопределено)

	Библиотека = EUSignКлиентСервер.ПолучитьОбъектБиблиотеки();
	
	Попытка
		ИдентификаторСертификатаКлюча = EUSignКлиентСервер.ПрочитатьКлючИз(Библиотека, ФайлКлюча, ПарольКлюча);
		КлючПрочитан = EUSignКлиентСервер.КлючПрочитан(Библиотека);
		ИнформацияОВладельцеКлюча = EUSignКлиентСервер.ИнформацияОВладельцеКлюча(Библиотека);
		EUSignКлиентСервер.СброситьКлюч(Библиотека);
	Исключение
		ТекстОшибкиИзБиблиотеки = EUSignКлиентСервер.ПоследняяОшибкаБиблиотеки(Библиотека);
		EUSignКлиентСервер.ЗавершитьРаботуБиблиотеки(Библиотека);
		ВызватьИсключение ТекстОшибкиИзБиблиотеки;
	КонецПопытки;

	EUSignКлиентСервер.ЗавершитьРаботуБиблиотеки(Библиотека);

КонецПроцедуры


&НаКлиенте
Процедура КомандаИнтерфейсЧтенияКлюча(Команда)

	Если РежимВыполненияКомандыНаКлиенте() Тогда
		КомандаИнтерфейсЧтенияКлючаВКонтекстеКлиента();	
	КонецЕсли;
	
	Если РежимВыполненияКомандыНаСервере() Тогда
		КомандаИнтерфейсЧтенияКлючаВКонтекстеСервера();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаИнтерфейсЧтенияКлючаВКонтекстеКлиента()

	Библиотека = EUSignКлиентСервер.ПолучитьОбъектБиблиотеки();
	EUSignКлиентСервер.ИнтерфейсЧтенияКлюча(Библиотека);
	
КонецПроцедуры

&НаСервере
Процедура КомандаИнтерфейсЧтенияКлючаВКонтекстеСервера()

	Библиотека = EUSignКлиентСервер.ПолучитьОбъектБиблиотеки();
	EUSignКлиентСервер.ИнтерфейсЧтенияКлюча(Библиотека);
	
КонецПроцедуры


&НаКлиенте
Процедура КомандаОчиститьТаблицуТаблицаИнформацииОВладельцеКлюча(Команда)
	
	ТаблицаИнформацииОВладельцеКлюча.Очистить();
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаГруппаТестСертификата

&НаКлиенте
Процедура КомандаПрочитатьСертификат(Команда)

	// Проверка 
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(ФайлСертификата) Тогда
		СообщитьПользователю(ТекстОшибкиЗаполнения(,,
			НСтр("ru = 'Файл сертификата'; uk = 'Файл сертифіката'")),,
			"ФайлСертификата",, Отказ);	
	КонецЕсли;

	Если Отказ Тогда
		Возврат;	
	КонецЕсли;
	
	// Подготовка
	ТаблицаИнформацииОВладельцеСертификата.Очистить();
	
	// Выполнение действия
	СертификатПрочитан = Ложь;
	ИнформацияОВладельцеСертификата = Неопределено;
	
	Если РежимВыполненияКомандыНаКлиенте() Тогда
		КомандаПрочитатьСертификатВКонтекстеКлиента(СертификатПрочитан, ИнформацияОВладельцеСертификата);	
	КонецЕсли;
	
	Если РежимВыполненияКомандыНаСервере() Тогда
		КомандаПрочитатьСертификатВКонтекстеСервера(СертификатПрочитан, ИнформацияОВладельцеСертификата);	
	КонецЕсли;
	
	// Оповещение о результате
	Если СертификатПрочитан Тогда

		Если ТипЗнч(ИнформацияОВладельцеСертификата) = Тип("Структура") Тогда
			ПоместитьСтруктуруВТаблицу(ТаблицаИнформацииОВладельцеСертификата, ИнформацияОВладельцеСертификата);
		КонецЕсли;

		ПоказатьОповещениеПользователя(НСтр("ru = 'Успешно'; uk = 'Успішно'"),,
			НСтр("ru = 'Сертификат успешно прочитан'; uk = 'Сертифікат успішно прочитаний'"),,
			СтатусОповещенияПользователя.Информация);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПрочитатьСертификатВКонтекстеКлиента(СертификатПрочитан = Ложь,
	ИнформацияОВладельцеСертификата = Неопределено)

	Библиотека = EUSignКлиентСервер.ПолучитьОбъектБиблиотеки();
	
	Попытка
		ИнформацияОВладельцеСертификата = EUSignКлиентСервер.ИнформацияОВладельцеСертификата(Библиотека, ФайлСертификата);
		СертификатПрочитан = Истина;
	Исключение
		ТекстОшибкиИзБиблиотеки = EUSignКлиентСервер.ПоследняяОшибкаБиблиотеки(Библиотека);
		EUSignКлиентСервер.ЗавершитьРаботуБиблиотеки(Библиотека);
		ВызватьИсключение ТекстОшибкиИзБиблиотеки;
	КонецПопытки;

	EUSignКлиентСервер.ЗавершитьРаботуБиблиотеки(Библиотека);
	
КонецПроцедуры

&НаСервере
Процедура КомандаПрочитатьСертификатВКонтекстеСервера(СертификатПрочитан = Ложь,
	ИнформацияОВладельцеСертификата = Неопределено)

	Библиотека = EUSignКлиентСервер.ПолучитьОбъектБиблиотеки();
	
	Попытка
		ИнформацияОВладельцеСертификата = EUSignКлиентСервер.ИнформацияОВладельцеСертификата(Библиотека, ФайлСертификата);
		СертификатПрочитан = Истина;
	Исключение
		ТекстОшибкиИзБиблиотеки = EUSignКлиентСервер.ПоследняяОшибкаБиблиотеки(Библиотека);
		EUSignКлиентСервер.ЗавершитьРаботуБиблиотеки(Библиотека);
		ВызватьИсключение ТекстОшибкиИзБиблиотеки;
	КонецПопытки;

	EUSignКлиентСервер.ЗавершитьРаботуБиблиотеки(Библиотека);

КонецПроцедуры


&НаКлиенте
Процедура КомандаОчиститьТаблицуТаблицаИнформацииОВладельцеСертификата(Команда)
	
	ТаблицаИнформацииОВладельцеСертификата.Очистить();
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаГруппаТестПодписи

&НаКлиенте
Процедура КомандаУстановитьТипПодписи(Команда)

	// Выполнение действия
	НастройкиУстановлены = Ложь;
	
	Если РежимВыполненияКомандыНаКлиенте() Тогда
		КомандаУстановитьТипПодписиВКонтекстеКлиента(НастройкиУстановлены);	
	КонецЕсли;
	
	Если РежимВыполненияКомандыНаСервере() Тогда
		КомандаУстановитьТипПодписиВКонтекстеСервера(НастройкиУстановлены);	
	КонецЕсли;
	
	// Оповещение о результате
	Если НастройкиУстановлены Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Успешно'; uk = 'Успішно'"),,
			НСтр("ru = 'Настройки ЭЦП установлены'; uk = 'Налаштування ЄЦП встановлено'"),,
			СтатусОповещенияПользователя.Информация);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьТипПодписиВКонтекстеКлиента(НастройкиУстановлены = Ложь)

	Библиотека = EUSignКлиентСервер.ПолучитьОбъектБиблиотеки();	
	Попытка
	
		EUSignКлиентСервер.УстановитьТипПодписи(Библиотека, EUSignКлиентСерверПовтИсп.ТипПодписи(ТипПодписи));

		НастройкиУстановлены = Истина;
	Исключение
		ТекстОшибкиИзБиблиотеки = EUSignКлиентСервер.ПоследняяОшибкаБиблиотеки(Библиотека);
		EUSignКлиентСервер.ЗавершитьРаботуБиблиотеки(Библиотека);
		ВызватьИсключение ТекстОшибкиИзБиблиотеки;
	КонецПопытки;
	
	EUSignКлиентСервер.ЗавершитьРаботуБиблиотеки(Библиотека);
	
КонецПроцедуры

&НаСервере
Процедура КомандаУстановитьТипПодписиВКонтекстеСервера(НастройкиУстановлены = Ложь)

	Библиотека = EUSignКлиентСервер.ПолучитьОбъектБиблиотеки();	
	Попытка
	
		EUSignКлиентСервер.УстановитьТипПодписи(Библиотека, EUSignКлиентСерверПовтИсп.ТипПодписи(ТипПодписи));

		НастройкиУстановлены = Истина;
	Исключение
		ТекстОшибкиИзБиблиотеки = EUSignКлиентСервер.ПоследняяОшибкаБиблиотеки(Библиотека);
		EUSignКлиентСервер.ЗавершитьРаботуБиблиотеки(Библиотека);
		ВызватьИсключение ТекстОшибкиИзБиблиотеки;
	КонецПопытки;
	
	EUSignКлиентСервер.ЗавершитьРаботуБиблиотеки(Библиотека);	
	
КонецПроцедуры


&НаКлиенте
Процедура КомандаПодписатьФайл(Команда)

	// Проверка 
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(ФайлКлючаДляПодписи) Тогда
		СообщитьПользователю(ТекстОшибкиЗаполнения(,,
			НСтр("ru = 'Файл ключа'; uk = 'Файл ключа'")),,
			"ФайлКлючаДляПодписи",, Отказ);	
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(ПарольКлючаДляПодписи) Тогда
		СообщитьПользователю(ТекстОшибкиЗаполнения(,,
			НСтр("ru = 'Пароль ключа'; uk = 'Пароль ключа'")),,
			"ПарольКлючаДляПодписи",, Отказ);	
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(ФайлНаПодпись) Тогда
		СообщитьПользователю(ТекстОшибкиЗаполнения(,,
			НСтр("ru = 'Файл на подпись'; uk = 'Файл на підпис'")),,
			"ФайлНаПодпись",, Отказ);	
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(ТипПодписи) Тогда
		СообщитьПользователю(ТекстОшибкиЗаполнения(,,
			НСтр("ru = 'Тип подписи'; uk = 'Тип підпису'")),,
			"ТипПодписи",, Отказ);	
	КонецЕсли;

	Если Отказ Тогда
		Возврат;	
	КонецЕсли;
	
	// Выполнение действия
	ПодписанныйФайл = "";
	ФайлПодписан = Ложь;
	ПутьКПодписанномуФайлу = Неопределено;
	
	Если РежимВыполненияКомандыНаКлиенте() Тогда
		КомандаПодписатьФайлВКонтекстеКлиента(ФайлПодписан, ПутьКПодписанномуФайлу);	
	КонецЕсли;
	
	Если РежимВыполненияКомандыНаСервере() Тогда
		КомандаПодписатьФайлВКонтекстеСервера(ФайлПодписан, ПутьКПодписанномуФайлу);	
	КонецЕсли;
	
	// Оповещение о результате
	Если ФайлПодписан Тогда

		ПодписанныйФайл = ПутьКПодписанномуФайлу;

		ПоказатьОповещениеПользователя(НСтр("ru = 'Успешно'; uk = 'Успішно'"),,
			НСтр("ru = 'Файл успешно подписан'; uk = 'Файл успішно підписано'"),,
			СтатусОповещенияПользователя.Информация);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПодписатьФайлВКонтекстеКлиента(ФайлПодписан = Ложь,
	ПутьКПодписанномуФайлу = Неопределено)

	Библиотека = EUSignКлиентСервер.ПолучитьОбъектБиблиотеки();
	
	Попытка

		Если Не EUSignКлиентСервер.КлючПрочитан(Библиотека) Тогда
			EUSignКлиентСервер.ПрочитатьКлючИз(Библиотека, ФайлКлючаДляПодписи, ПарольКлючаДляПодписи);	
		КонецЕсли;		
		
		//zkEUSignКлиентСервер.УстановитьТипПодписи(Библиотека, zkEUSignКлиентСервер.ТипПодписи(ТипПодписи));
		
		// ФорматПодписи, если Истина - внешняя подпись, если Ложь - внутрення подпись
		Если ФорматПодписи Тогда
			// Внешняя подпись
			ПутьКПодписанномуФайлу = EUSignКлиентСервер.ПодписатьДанныеВнешнейПодписьюФайл(Библиотека,
				ФайлНаПодпись,
				EUSignКлиентСерверПовтИсп.ТипПодписи(ТипПодписи));
		Иначе
			// Внутренняя подпись
			ПутьКПодписанномуФайлу = EUSignКлиентСервер.ПодписатьДанныеВнутреннейПодписьюФайл(Библиотека,
				ФайлНаПодпись,
				ВключатьСертификатПодписантаВоВнутреннююПодпись,
				EUSignКлиентСерверПовтИсп.ТипПодписи(ТипПодписи));
		КонецЕсли;

		ФайлПодписан = Истина;
	Исключение
		ТекстОшибкиИзБиблиотеки = EUSignКлиентСервер.ПоследняяОшибкаБиблиотеки(Библиотека);
		EUSignКлиентСервер.ЗавершитьРаботуБиблиотеки(Библиотека);
		ВызватьИсключение СтрШаблон("%1%2%3%4%5", ОписаниеОшибки(), Символы.ПС,
			НСтр("ru = 'Описание ошибки из библиотеки:'; uk = 'Опис помилки з бібліотеки:'"), Символы.ПС,
			ТекстОшибкиИзБиблиотеки);
	КонецПопытки;

	EUSignКлиентСервер.ЗавершитьРаботуБиблиотеки(Библиотека);
	
КонецПроцедуры

&НаСервере
Процедура КомандаПодписатьФайлВКонтекстеСервера(ФайлПодписан = Ложь,
	ПутьКПодписанномуФайлу = Неопределено)

	Библиотека = EUSignКлиентСервер.ПолучитьОбъектБиблиотеки();
	
	Попытка

		Если Не EUSignКлиентСервер.КлючПрочитан(Библиотека) Тогда
			EUSignКлиентСервер.ПрочитатьКлючИз(Библиотека, ФайлКлючаДляПодписи, ПарольКлючаДляПодписи);	
		КонецЕсли;		
		
		//zkEUSignКлиентСервер.УстановитьТипПодписи(Библиотека, zkEUSignКлиентСервер.ТипПодписи(ТипПодписи));
		
		// ФорматПодписи, если Истина - внешняя подпись, если Ложь - внутрення подпись
		Если ФорматПодписи Тогда
			// Внешняя подпись
			ПутьКПодписанномуФайлу = EUSignКлиентСервер.ПодписатьДанныеВнешнейПодписьюФайл(Библиотека,
				ФайлНаПодпись,
				EUSignКлиентСерверПовтИсп.ТипПодписи(ТипПодписи));
		Иначе
			// Внутренняя подпись
			ПутьКПодписанномуФайлу = EUSignКлиентСервер.ПодписатьДанныеВнутреннейПодписьюФайл(Библиотека,
				ФайлНаПодпись,
				ВключатьСертификатПодписантаВоВнутреннююПодпись,
				EUSignКлиентСерверПовтИсп.ТипПодписи(ТипПодписи));
		КонецЕсли;

		ФайлПодписан = Истина;
	Исключение
		ТекстОшибкиИзБиблиотеки = EUSignКлиентСервер.ПоследняяОшибкаБиблиотеки(Библиотека);
		EUSignКлиентСервер.ЗавершитьРаботуБиблиотеки(Библиотека);
		ВызватьИсключение СтрШаблон("%1%2%3%4%5", ОписаниеОшибки(), Символы.ПС,
			НСтр("ru = 'Описание ошибки из библиотеки:'; uk = 'Опис помилки з бібліотеки:'"), Символы.ПС,
			ТекстОшибкиИзБиблиотеки);
	КонецПопытки;

	EUSignКлиентСервер.ЗавершитьРаботуБиблиотеки(Библиотека);

КонецПроцедуры


&НаКлиенте
Процедура КомандаПроверитьПодписьФайла(Команда)

	// Проверка 
	Отказ = Ложь;

	Если Не ЗначениеЗаполнено(ПодписанныйФайл) Тогда
		СообщитьПользователю(ТекстОшибкиЗаполнения(,,
			НСтр("ru = 'Подписанный файл'; uk = 'Підписаний файл'")),,
			"ПодписанныйФайл",, Отказ);
	КонецЕсли;

	// Для внешней подписи (внешняя подпись проверяетс только в КОМПЛЕКТЕ с исходными данными!)
	Если ФорматПодписи
		И Не ЗначениеЗаполнено(ФайлНаПодпись) Тогда
		СообщитьПользователю(ТекстОшибкиЗаполнения(,,
			НСтр("ru = 'Файл на подпись'; uk = 'Файл на підпис'")),,
			"ФайлНаПодпись",, Отказ);
	КонецЕсли;

	Если Отказ Тогда
		Возврат;	
	КонецЕсли;
	
	// Выполнение действия
	ТаблицаИнформацияОПодписи.Очистить();
	ФайлПодписан = Ложь;
	ИнформацияОПодписанномФайле = Неопределено;
	
	Если РежимВыполненияКомандыНаКлиенте() Тогда
		КомандаПроверитьПодписьФайлаВКонтекстеКлиента(ФайлПодписан, ИнформацияОПодписанномФайле);	
	КонецЕсли;
	
	Если РежимВыполненияКомандыНаСервере() Тогда
		КомандаПроверитьПодписьФайлаВКонтекстеСервера(ФайлПодписан, ИнформацияОПодписанномФайле);	
	КонецЕсли;
	
	Если ТипЗнч(ИнформацияОПодписанномФайле) = Тип("Структура") Тогда
		ПоместитьСтруктуруВТаблицу(ТаблицаИнформацияОПодписи, ИнформацияОПодписанномФайле);
	КонецЕсли;
	
	// Оповещение о результате
	Если ФайлПодписан Тогда		
		ПоказатьОповещениеПользователя(НСтр("ru = 'Успешно'; uk = 'Успішно'"),,
			НСтр("ru = 'Файл подписан'; uk = 'Файл підписан'"),,
			СтатусОповещенияПользователя.Информация);
	Иначе
		Сообщить(НСтр("ru = 'Файл НЕ подписан'; uk = 'Файл НЕ підписан'"));		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПроверитьПодписьФайлаВКонтекстеКлиента(ФайлПодписан = Ложь,
	ИнформацияОПодписанномФайле = Неопределено)

	Библиотека = EUSignКлиентСервер.ПолучитьОбъектБиблиотеки();
	
	Попытка
		
		ФайлПодписан = EUSignКлиентСервер.ДанныеПодписаныФайл(Библиотека, ПодписанныйФайл);

		// ФорматПодписи, если Истина - внешняя подпись, если Ложь - внутрення подпись
		Если ФорматПодписи Тогда
			// Внешняя подпись
			ИнформацияОПодписанномФайле = EUSignКлиентСервер.ИнформацияОВнешнейПодписиДанныхФайл(Библиотека,
				ФайлНаПодпись, ПодписанныйФайл);
		Иначе
			// Внутренняя подпись
			ИнформацияОПодписанномФайле = EUSignКлиентСервер.ИнформацияОВнутреннейПодписиДанныхФайл(Библиотека,
				ПодписанныйФайл);
		КонецЕсли;
		
	Исключение
		ТекстОшибкиИзБиблиотеки = EUSignКлиентСервер.ПоследняяОшибкаБиблиотеки(Библиотека);
		EUSignКлиентСервер.ЗавершитьРаботуБиблиотеки(Библиотека);
		ВызватьИсключение СтрШаблон("%1%2%3%4%5", ОписаниеОшибки(), Символы.ПС,
			НСтр("ru = 'Описание ошибки из библиотеки:'; uk = 'Опис помилки з бібліотеки:'"), Символы.ПС,
			ТекстОшибкиИзБиблиотеки);
	КонецПопытки;

	EUSignКлиентСервер.ЗавершитьРаботуБиблиотеки(Библиотека);
	
КонецПроцедуры

&НаСервере
Процедура КомандаПроверитьПодписьФайлаВКонтекстеСервера(ФайлПодписан = Ложь,
	ИнформацияОПодписанномФайле = Неопределено)

	Библиотека = EUSignКлиентСервер.ПолучитьОбъектБиблиотеки();
	
	Попытка
		
		ФайлПодписан = EUSignКлиентСервер.ДанныеПодписаныФайл(Библиотека, ПодписанныйФайл);

		// ФорматПодписи, если Истина - внешняя подпись, если Ложь - внутрення подпись
		Если ФорматПодписи Тогда
			// Внешняя подпись
			ИнформацияОПодписанномФайле = EUSignКлиентСервер.ИнформацияОВнешнейПодписиДанныхФайл(Библиотека,
				ФайлНаПодпись, ПодписанныйФайл);
		Иначе
			// Внутренняя подпись
			ИнформацияОПодписанномФайле = EUSignКлиентСервер.ИнформацияОВнутреннейПодписиДанныхФайл(Библиотека,
				ПодписанныйФайл);
		КонецЕсли;
		
	Исключение
		ТекстОшибкиИзБиблиотеки = EUSignКлиентСервер.ПоследняяОшибкаБиблиотеки(Библиотека);
		EUSignКлиентСервер.ЗавершитьРаботуБиблиотеки(Библиотека);
		ВызватьИсключение СтрШаблон("%1%2%3%4%5", ОписаниеОшибки(), Символы.ПС,
			НСтр("ru = 'Описание ошибки из библиотеки:'; uk = 'Опис помилки з бібліотеки:'"), Символы.ПС,
			ТекстОшибкиИзБиблиотеки);
	КонецПопытки;

	EUSignКлиентСервер.ЗавершитьРаботуБиблиотеки(Библиотека);

КонецПроцедуры


&НаКлиенте
Процедура КомандаПодписатьДанные(Команда)

	// Проверка 
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(ФайлКлючаДляПодписи) Тогда
		СообщитьПользователю(ТекстОшибкиЗаполнения(,,
			НСтр("ru = 'Файл ключа'; uk = 'Файл ключа'")),,
			"ФайлКлючаДляПодписи",, Отказ);	
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(ПарольКлючаДляПодписи) Тогда
		СообщитьПользователю(ТекстОшибкиЗаполнения(,,
			НСтр("ru = 'Пароль ключа'; uk = 'Пароль ключа'")),,
			"ПарольКлючаДляПодписи",, Отказ);	
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(ДанныеНаПодпись) Тогда
		СообщитьПользователю(ТекстОшибкиЗаполнения(,,
			НСтр("ru = 'Данные на подпись'; uk = 'Дані на підпис'")),,
			"ДанныеНаПодпись",, Отказ);	
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(ТипПодписи) Тогда
		СообщитьПользователю(ТекстОшибкиЗаполнения(,,
			НСтр("ru = 'Тип подписи'; uk = 'Тип підпису'")),,
			"ТипПодписи",, Отказ);	
	КонецЕсли;

	Если Отказ Тогда
		Возврат;	
	КонецЕсли;
	
	// Выполнение действия
	ПодписанныеДанные = "";
	ДанныеПодписаны = Ложь;
	ЗначениеПодписанныхДанных = Неопределено;
	
	Если РежимВыполненияКомандыНаКлиенте() Тогда
		КомандаПодписатьДанныеВКонтекстеКлиента(ДанныеПодписаны, ЗначениеПодписанныхДанных);	
	КонецЕсли;
	
	Если РежимВыполненияКомандыНаСервере() Тогда
		КомандаПодписатьДанныеВКонтекстеСервера(ДанныеПодписаны, ЗначениеПодписанныхДанных);	
	КонецЕсли;
	
	// Оповещение о результате
	Если ДанныеПодписаны Тогда

		ПодписанныеДанные = ЗначениеПодписанныхДанных;

		ПоказатьОповещениеПользователя(НСтр("ru = 'Успешно'; uk = 'Успішно'"),,
			НСтр("ru = 'Данные успешно подписан'; uk = 'Дані успішно підписано'"),,
			СтатусОповещенияПользователя.Информация);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПодписатьДанныеВКонтекстеКлиента(ДанныеПодписаны = Ложь,
	ЗначениеПодписанныхДанных = Неопределено)

	Библиотека = EUSignКлиентСервер.ПолучитьОбъектБиблиотеки();
	
	Попытка

		Если Не EUSignКлиентСервер.КлючПрочитан(Библиотека) Тогда
			EUSignКлиентСервер.ПрочитатьКлючИз(Библиотека, ФайлКлючаДляПодписи, ПарольКлючаДляПодписи);	
		КонецЕсли;		
		
		//zkEUSignКлиентСервер.УстановитьТипПодписи(Библиотека, zkEUSignКлиентСервер.ТипПодписи(ТипПодписи));
		
		// ФорматПодписи, если Истина - внешняя подпись, если Ложь - внутрення подпись
		Если ФорматПодписи Тогда
			// Внешняя подпись
			ЗначениеПодписанныхДанных = EUSignКлиентСервер.ПодписатьДанныеВнешнейПодписьюСтрокаBase64(Библиотека,
				ДанныеНаПодпись,
				EUSignКлиентСерверПовтИсп.ТипПодписи(ТипПодписи));
		Иначе
			// Внутренняя подпись
			ЗначениеПодписанныхДанных = EUSignКлиентСервер.ПодписатьДанныеВнутреннейПодписьюСтрокаBase64(Библиотека,
				ДанныеНаПодпись,
				ВключатьСертификатПодписантаВоВнутреннююПодпись,
				EUSignКлиентСерверПовтИсп.ТипПодписи(ТипПодписи));
		КонецЕсли;

		ДанныеПодписаны = Истина;
	Исключение
		ТекстОшибкиИзБиблиотеки = EUSignКлиентСервер.ПоследняяОшибкаБиблиотеки(Библиотека);
		EUSignКлиентСервер.ЗавершитьРаботуБиблиотеки(Библиотека);
		ВызватьИсключение СтрШаблон("%1%2%3%4%5", ОписаниеОшибки(), Символы.ПС,
			НСтр("ru = 'Описание ошибки из библиотеки:'; uk = 'Опис помилки з бібліотеки:'"), Символы.ПС,
			ТекстОшибкиИзБиблиотеки);
	КонецПопытки;

	EUSignКлиентСервер.ЗавершитьРаботуБиблиотеки(Библиотека);
	
КонецПроцедуры

&НаСервере
Процедура КомандаПодписатьДанныеВКонтекстеСервера(ДанныеПодписаны = Ложь,
	ЗначениеПодписанныхДанных = Неопределено)

	Библиотека = EUSignКлиентСервер.ПолучитьОбъектБиблиотеки();
	
	Попытка

		Если Не EUSignКлиентСервер.КлючПрочитан(Библиотека) Тогда
			EUSignКлиентСервер.ПрочитатьКлючИз(Библиотека, ФайлКлючаДляПодписи, ПарольКлючаДляПодписи);	
		КонецЕсли;		
		
		//zkEUSignКлиентСервер.УстановитьТипПодписи(Библиотека, zkEUSignКлиентСервер.ТипПодписи(ТипПодписи));
		
		// ФорматПодписи, если Истина - внешняя подпись, если Ложь - внутрення подпись
		Если ФорматПодписи Тогда
			// Внешняя подпись
			ЗначениеПодписанныхДанных = EUSignКлиентСервер.ПодписатьДанныеВнешнейПодписьюСтрокаBase64(Библиотека,
				ДанныеНаПодпись,
				EUSignКлиентСерверПовтИсп.ТипПодписи(ТипПодписи));
		Иначе
			// Внутренняя подпись
			ЗначениеПодписанныхДанных = EUSignКлиентСервер.ПодписатьДанныеВнутреннейПодписьюСтрокаBase64(Библиотека,
				ДанныеНаПодпись,
				ВключатьСертификатПодписантаВоВнутреннююПодпись,
				EUSignКлиентСерверПовтИсп.ТипПодписи(ТипПодписи));
		КонецЕсли;

		ДанныеПодписаны = Истина;
	Исключение
		ТекстОшибкиИзБиблиотеки = EUSignКлиентСервер.ПоследняяОшибкаБиблиотеки(Библиотека);
		EUSignКлиентСервер.ЗавершитьРаботуБиблиотеки(Библиотека);
		ВызватьИсключение СтрШаблон("%1%2%3%4%5", ОписаниеОшибки(), Символы.ПС,
			НСтр("ru = 'Описание ошибки из библиотеки:'; uk = 'Опис помилки з бібліотеки:'"), Символы.ПС,
			ТекстОшибкиИзБиблиотеки);
	КонецПопытки;

	EUSignКлиентСервер.ЗавершитьРаботуБиблиотеки(Библиотека);

КонецПроцедуры


&НаКлиенте
Процедура КомандаПроверитьПодписьДанных(Команда)

	// Проверка 
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(ПодписанныеДанные) Тогда
		СообщитьПользователю(ТекстОшибкиЗаполнения(,,
			НСтр("ru = 'Подписанные данные'; uk = 'Підписані дані'")),,
			"ПодписанныеДанные",, Отказ);
	КонецЕсли;

	// Для внешней подписи (внешняя подпись проверяетс только в КОМПЛЕКТЕ с исходными данными!)
	Если ФорматПодписи
		И Не ЗначениеЗаполнено(ДанныеНаПодпись) Тогда
		СообщитьПользователю(ТекстОшибкиЗаполнения(,,
			НСтр("ru = 'Данные на подпись'; uk = 'Дані на підпис'")),,
			"ДанныеНаПодпись",, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;	
	КонецЕсли;
	
	// Выполнение действия
	ТаблицаИнформацияОПодписи.Очистить();
	ДанныеПодписаны = Ложь;
	ИнформацияОПодписанныхДанных = Неопределено;
	
	Если РежимВыполненияКомандыНаКлиенте() Тогда
		КомандаПроверитьПодписьДанныхВКонтекстеКлиента(ДанныеПодписаны, ИнформацияОПодписанныхДанных);	
	КонецЕсли;
	
	Если РежимВыполненияКомандыНаСервере() Тогда
		КомандаПроверитьПодписьДанныхВКонтекстеСервера(ДанныеПодписаны, ИнформацияОПодписанныхДанных);	
	КонецЕсли;
	
	Если ТипЗнч(ИнформацияОПодписанныхДанных) = Тип("Структура") Тогда
		ПоместитьСтруктуруВТаблицу(ТаблицаИнформацияОПодписи, ИнформацияОПодписанныхДанных);
	КонецЕсли;
	
	// Оповещение о результате
	Если ДанныеПодписаны Тогда		
		ПоказатьОповещениеПользователя(НСтр("ru = 'Успешно'; uk = 'Успішно'"),,
			НСтр("ru = 'Данные подписаны'; uk = 'Дані підписані'"),,
			СтатусОповещенияПользователя.Информация);
	Иначе
		Сообщить(НСтр("ru = 'Данные НЕ подписаны'; uk = 'Дані НЕ підписані'"));		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПроверитьПодписьДанныхВКонтекстеКлиента(ДанныеПодписаны = Ложь,
	ИнформацияОПодписанныхДанных = Неопределено)

	Библиотека = EUSignКлиентСервер.ПолучитьОбъектБиблиотеки();
	
	Попытка
		
		ДанныеПодписаны = EUSignКлиентСервер.ДанныеПодписаныСтрокаBase64(Библиотека, ПодписанныеДанные);

		// ФорматПодписи, если Истина - внешняя подпись, если Ложь - внутрення подпись
		Если ФорматПодписи Тогда
			// Внешняя подпись
			ИнформацияОПодписанныхДанных = EUSignКлиентСервер.ИнформацияОВнешнейПодписиДанныхСтрокаBase64(Библиотека,
				ДанныеНаПодпись,
				ПодписанныеДанные);
		Иначе
			// Внутренняя подпись
			ИнформацияОПодписанныхДанных = EUSignКлиентСервер.ИнформацияОВнутреннейПодписиДанныхСтрокаBase64(Библиотека,
				ПодписанныеДанные);
		КонецЕсли;
		
	Исключение
		ТекстОшибкиИзБиблиотеки = EUSignКлиентСервер.ПоследняяОшибкаБиблиотеки(Библиотека);
		EUSignКлиентСервер.ЗавершитьРаботуБиблиотеки(Библиотека);
		ВызватьИсключение СтрШаблон("%1%2%3%4%5", ОписаниеОшибки(), Символы.ПС,
			НСтр("ru = 'Описание ошибки из библиотеки:'; uk = 'Опис помилки з бібліотеки:'"), Символы.ПС,
			ТекстОшибкиИзБиблиотеки);
	КонецПопытки;

	EUSignКлиентСервер.ЗавершитьРаботуБиблиотеки(Библиотека);
	
КонецПроцедуры

&НаСервере
Процедура КомандаПроверитьПодписьДанныхВКонтекстеСервера(ДанныеПодписаны = Ложь,
	ИнформацияОПодписанныхДанных = Неопределено)

	Библиотека = EUSignКлиентСервер.ПолучитьОбъектБиблиотеки();
	
	Попытка
		
		ДанныеПодписаны = EUSignКлиентСервер.ДанныеПодписаныСтрокаBase64(Библиотека, ПодписанныеДанные);

		// ФорматПодписи, если Истина - внешняя подпись, если Ложь - внутрення подпись
		Если ФорматПодписи Тогда
			// Внешняя подпись
			ИнформацияОПодписанныхДанных = EUSignКлиентСервер.ИнформацияОВнешнейПодписиДанныхСтрокаBase64(Библиотека,
				ДанныеНаПодпись,
				ПодписанныеДанные);
		Иначе
			// Внутренняя подпись
			ИнформацияОПодписанныхДанных = EUSignКлиентСервер.ИнформацияОВнутреннейПодписиДанныхСтрокаBase64(Библиотека,
				ПодписанныеДанные);
		КонецЕсли;
		
	Исключение
		ТекстОшибкиИзБиблиотеки = EUSignКлиентСервер.ПоследняяОшибкаБиблиотеки(Библиотека);
		EUSignКлиентСервер.ЗавершитьРаботуБиблиотеки(Библиотека);
		ВызватьИсключение СтрШаблон("%1%2%3%4%5", ОписаниеОшибки(), Символы.ПС,
			НСтр("ru = 'Описание ошибки из библиотеки:'; uk = 'Опис помилки з бібліотеки:'"), Символы.ПС,
			ТекстОшибкиИзБиблиотеки);
	КонецПопытки;

	EUSignКлиентСервер.ЗавершитьРаботуБиблиотеки(Библиотека);

КонецПроцедуры


&НаКлиенте
Процедура КомандаОчиститьТаблицаИнформацияОПодписи(Команда)
	
	ТаблицаИнформацияОПодписи.Очистить();
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаГруппаТестШифрования

&НаКлиенте
Процедура КомандаШифроватьФайл(Команда)

	// Проверка 
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(ФайлКлючаДляШифрования) Тогда
		СообщитьПользователю(ТекстОшибкиЗаполнения(,,
			НСтр("ru = 'Файл ключа'; uk = 'Файл ключа'")),,
			"ФайлКлючаДляШифрования",, Отказ);	
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(ПарольКлючаДляШифрования) Тогда
		СообщитьПользователю(ТекстОшибкиЗаполнения(,,
			НСтр("ru = 'Пароль ключа'; uk = 'Пароль ключа'")),,
			"ПарольКлючаДляШифрования",, Отказ);	
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(ФайлНаШифрование) Тогда
		СообщитьПользователю(ТекстОшибкиЗаполнения(,,
			НСтр("ru = 'Файл на подпись'; uk = 'Файл на підпис'")),,
			"ФайлНаШифрование",, Отказ);	
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(ФайлСертификатаПолучателяЗашифрованныхДанных) Тогда
		СообщитьПользователю(ТекстОшибкиЗаполнения(,,
			НСтр("ru = 'Файл сертификата получателя'; uk = 'Файл сертифіката отримувача'")),,
			"ФайлСертификатаПолучателяЗашифрованныхДанных",, Отказ);	
	КонецЕсли;

	Если Отказ Тогда
		Возврат;	
	КонецЕсли;
	
	// Выполнение действия
	ЗашифрованныйФайл = "";
	ФайлЗашифрован = Ложь;
	ПутьКЗашифрованномуФайлу = Неопределено;
	
	Если РежимВыполненияКомандыНаКлиенте() Тогда
		КомандаШифроватьФайлВКонтекстеКлиента(ФайлЗашифрован, ПутьКЗашифрованномуФайлу);	
	КонецЕсли;
	
	Если РежимВыполненияКомандыНаСервере() Тогда
		КомандаШифроватьФайлВКонтекстеСервера(ФайлЗашифрован, ПутьКЗашифрованномуФайлу);	
	КонецЕсли;
	
	// Оповещение о результате
	Если ФайлЗашифрован Тогда

		ЗашифрованныйФайл = ПутьКЗашифрованномуФайлу;

		ПоказатьОповещениеПользователя(НСтр("ru = 'Успешно'; uk = 'Успішно'"),,
			НСтр("ru = 'Файл успешно зашифрован'; uk = 'Файл успішно зашифрований'"),,
			СтатусОповещенияПользователя.Информация);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаШифроватьФайлВКонтекстеКлиента(ФайлЗашифрован = Ложь,
	ПутьКЗашифрованномуФайлу = Неопределено)

	Библиотека = EUSignКлиентСервер.ПолучитьОбъектБиблиотеки();
	
	Попытка

		//
		
	Исключение
		ТекстОшибкиИзБиблиотеки = EUSignКлиентСервер.ПоследняяОшибкаБиблиотеки(Библиотека);
		EUSignКлиентСервер.ЗавершитьРаботуБиблиотеки(Библиотека);
		ВызватьИсключение СтрШаблон("%1%2%3%4%5", ОписаниеОшибки(), Символы.ПС,
			НСтр("ru = 'Описание ошибки из библиотеки:'; uk = 'Опис помилки з бібліотеки:'"), Символы.ПС,
			ТекстОшибкиИзБиблиотеки);
	КонецПопытки;

	EUSignКлиентСервер.ЗавершитьРаботуБиблиотеки(Библиотека);
	
КонецПроцедуры

&НаСервере
Процедура КомандаШифроватьФайлВКонтекстеСервера(ФайлЗашифрован = Ложь,
	ПутьКЗашифрованномуФайлу = Неопределено)

	Библиотека = EUSignКлиентСервер.ПолучитьОбъектБиблиотеки();
	
	Попытка

		Если Не EUSignКлиентСервер.КлючПрочитан(Библиотека) Тогда
			EUSignКлиентСервер.ПрочитатьКлючИз(Библиотека, ФайлКлючаДляШифрования, ПарольКлючаДляШифрования);	
		КонецЕсли;
		
		ИнформацияОСертификатеПолучателя = EUSignКлиентСервер.ИнформацияОВладельцеСертификата(Библиотека,
			ФайлСертификатаПолучателяЗашифрованныхДанных);
		Если ИнформацияОСертификатеПолучателя = Неопределено Тогда
			Возврат;	
		КонецЕсли;

		EUSignКлиентСервер.ЗашифроватьФайл(Библиотека,
			ФайлНаШифрование,
			ИнформацияОСертификатеПолучателя.СертификатИдентификатор);
		
	Исключение
		ТекстОшибкиИзБиблиотеки = EUSignКлиентСервер.ПоследняяОшибкаБиблиотеки(Библиотека);
		EUSignКлиентСервер.ЗавершитьРаботуБиблиотеки(Библиотека);
		ВызватьИсключение СтрШаблон("%1%2%3%4%5", ОписаниеОшибки(), Символы.ПС,
			НСтр("ru = 'Описание ошибки из библиотеки:'; uk = 'Опис помилки з бібліотеки:'"), Символы.ПС,
			ТекстОшибкиИзБиблиотеки);
	КонецПопытки;

	EUSignКлиентСервер.ЗавершитьРаботуБиблиотеки(Библиотека);

КонецПроцедуры

#КонецОбласти

#Область СтраницаГруппаBase64

&НаКлиенте
Процедура КомандаКонвертироватьФайлВСтрокуBase64(Команда)
	
	СтрокаBase64 = EUSignКлиентСервер.ФайлВСтрокуBase64(ФайлBase64);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаКонвертироватьСтрокуBase64ВФайл(Команда)
	
	ФайлBase64 = EUSignКлиентСервер.СтрокуBase64ВФайл(СтрокаBase64, ФайлBase64);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаКонвертироватьСтрокуBase64ВоВременныйФайл(Команда)

	ФайлBase64 = EUSignКлиентСервер.СтрокуBase64ВФайл(СтрокаBase64);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеФайлаСертификатовВсехАЦСК()

	РезультатHTTP = КоннекторHTTP.Get("https://iit.com.ua/download/productfiles/CACertificates.p7b");
	Если РезультатHTTP.КодСостояния <> 200 Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось получить файл с сервера по адресу(https://iit.com.ua/download/productfiles/CACertificates.p7b). Попробуйте загрузить через браузер.';
			|uk = 'Не вдалося отримати файл із сервера за адресою (https://iit.com.ua/download/productfiles/CACertificates.p7b). Спробуйте завантажити браузер.'");	
	КонецЕсли;
	
	ДвоичныеДанные = РезультатHTTP.Тело;	
	
	Результат = Новый Структура;
	Результат.Вставить("ДвоичныеДанные", ДвоичныеДанные);
	Результат.Вставить("Расширение", "p7b");
	Результат.Вставить("ИмяФайла", "CACertificates");
	Результат.Вставить("ИмяФайлаСРаширением", СтрШаблон("%1.%2", Результат.ИмяФайла, Результат.Расширение));
	
	Возврат Результат;	

КонецФункции

#Область АЦСК

&НаСервереБезКонтекста
Функция ПолучитьНастройкиВсехАЦСК()
	
	ДополнительныеПараметрыЗапросаHTTP = Новый Структура;
	ДополнительныеПараметрыЗапросаHTTP.Вставить("ПараметрыПреобразованияJSON", Новый Структура("ПрочитатьВСоответствие", Ложь));
	Возврат КоннекторHTTP.GetJson("https://ca.diia.gov.ua/download/Soft/CAs.json",, ДополнительныеПараметрыЗапросаHTTP);

КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуНастроекВсехАЦСК()

	ТаблицаНастроекАЦСК.Очистить();
	
	Для Каждого НастройкаАЦСК Из ПолучитьНастройкиВсехАЦСК() Цикл
		НоваяСтрока = ТаблицаНастроекАЦСК.Добавить();
		НоваяСтрока.Наименование = НастройкаАЦСК["issuerCNs"][0];
		НоваяСтрока.Идентификатор = НастройкаАЦСК["address"];
		НоваяСтрока.Настройки = НастройкаАЦСК;
		НоваяСтрока.TSPИспользовать = Истина;
		НоваяСтрока.OCSPИспользовать = Истина;
		НоваяСтрока.LDAPИспользовать = Ложь;
		НоваяСтрока.CMPИспользовать = Истина;
	КонецЦикла;	

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиПоТекущемуАЦСК()

	Для Каждого Строка Из ТаблицаНастроекАЦСК Цикл
		Если Строка.Пометка Тогда

			TSPИспользовать = Строка.TSPИспользовать;
			TSPАдресСервера = Строка.Настройки["tspAddress"];
			TSPПорт = Строка.Настройки["tspAddressPort"];

			OCSPИспользовать = Строка.OCSPИспользовать;
			OCSPАдресСервера = Строка.Настройки["ocspAccessPointAddress"];
			OCSPПорт = Строка.Настройки["ocspAccessPointPort"];

			LDAPИспользовать = Строка.LDAPИспользовать;
			LDAPАдресСервера = Строка.Настройки["address"];
			LDAPПорт = 389;
			
			CMPИспользовать = Строка.CMPИспользовать;
			CMPАдресСервера = Строка.Настройки["cmpAddress"];
			CMPПорт = 80;

			Прервать;
		КонецЕсли;
	КонецЦикла;	

КонецПроцедуры

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьТипПлатформы(Знач Строкой = Ложь)

	СистемнаяИнформация = Новый СистемнаяИнформация;
	ЗначениеТипаПлатформы = СистемнаяИнформация.ТипПлатформы;
	
	Если Строкой Тогда
		Если ЗначениеТипаПлатформы = ТипПлатформы.Windows_x86 Тогда
			ЗначениеТипаПлатформы = "Windows_x86";
		ИначеЕсли ЗначениеТипаПлатформы = ТипПлатформы.Windows_x86_64 Тогда
			ЗначениеТипаПлатформы = "Windows_x86_64";
		Иначе
			ЗначениеТипаПлатформы = "";
		КонецЕсли;	
	КонецЕсли;
	
	Возврат ЗначениеТипаПлатформы;

КонецФункции


&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяМакетаОбработки(Знач БазовоеИмяМакета, Знач ЗначениеТипаПлатформы = Неопределено)

	Постфикс = "";
	
	Если ЗначениеТипаПлатформы = Неопределено Тогда
		ЗначениеТипаПлатформы = ПолучитьТипПлатформы();
	КонецЕсли;

	Если ЗначениеТипаПлатформы = ТипПлатформы.Windows_x86
		Или ЗначениеТипаПлатформы = "Windows_x86" Тогда
		Постфикс = "";
	ИначеЕсли ЗначениеТипаПлатформы = ТипПлатформы.Windows_x86_64
		Или ЗначениеТипаПлатформы = "Windows_x86_64" Тогда
		Постфикс = "64";	
	КонецЕсли;
	
	Возврат СтрШаблон("%1%2", БазовоеИмяМакета, Постфикс);

КонецФункции

&НаСервере
Функция ПолучитьМакетОбработки(Знач ИмяМакета)

	Попытка
		ОбъектОбработки = РеквизитФормыВЗначение("Объект");
		Макет = ОбъектОбработки.ПолучитьМакет(ИмяМакета);
	Исключение
		ВызватьИсключение СтрШаблон(НСтр("ru = 'В обработке нет макета с именем - %1';
			|uk = 'В обробці немає макета з ім''ям - %1'"), ИмяМакета);
	КонецПопытки;
	
	Возврат Макет;

КонецФункции


&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьКомандуРегистрацииБиблиотеки(Знач КаталогБиблиотеки = Неопределено, Знач ЗначениеТипаПлатформы = Неопределено)

	Если КаталогБиблиотеки = Неопределено Тогда
		КаталогБиблиотеки = ЗначенияПоУмолчанию().КаталогБиблиотеки;	
	КонецЕсли;
	
	Если ЗначениеТипаПлатформы = Неопределено Тогда
		ЗначениеТипаПлатформы = ПолучитьТипПлатформы();
	КонецЕсли;

	Если ЗначениеТипаПлатформы = ТипПлатформы.Windows_x86 Тогда
		Команда = "regsvr32";
	ИначеЕсли ЗначениеТипаПлатформы = ТипПлатформы.Windows_x86_64 Тогда
		Команда = "C:\Windows\System32\regsvr32";
	Иначе
		ВызватьИсключение НСтр("ru = 'Для текущей ОС нет возможности зарегистрировать криптографическою библиотеку';
			|uk = 'Для поточної ОС немає можливості зареєструвати криптографічну бібліотеку'");
	КонецЕсли;
	
	Возврат СтрШаблон("%1 ""%2""",
		Команда,
		СтрШаблон("%1\EU1S.dll", КаталогБиблиотеки));

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьКомандуРазрегистрацииБиблиотеки(Знач КаталогБиблиотеки = Неопределено, Знач ЗначениеТипаПлатформы = Неопределено)

	Если КаталогБиблиотеки = Неопределено Тогда
		КаталогБиблиотеки = ЗначенияПоУмолчанию().КаталогБиблиотеки;	
	КонецЕсли;
	
	Если ЗначениеТипаПлатформы = Неопределено Тогда
		ЗначениеТипаПлатформы = ПолучитьТипПлатформы();
	КонецЕсли;

	Если ЗначениеТипаПлатформы = ТипПлатформы.Windows_x86 Тогда
		Команда = "regsvr32 /u";
	ИначеЕсли ЗначениеТипаПлатформы = ТипПлатформы.Windows_x86_64 Тогда
		Команда = "C:\Windows\System32\regsvr32 /u";
	Иначе
		ВызватьИсключение НСтр("ru = 'Для текущей ОС нет возможности зарегистрировать криптографическою библиотеку';
			|uk = 'Для поточної ОС немає можливості зареєструвати криптографічну бібліотеку'");
	КонецЕсли;
	
	Возврат СтрШаблон("%1 ""%2""",
		Команда,
		СтрШаблон("%1\EU1S.dll", КаталогБиблиотеки));

КонецФункции


&НаСервере
Функция ПолучитьОписаниеАрхиваБиблиотеки(Знач ЗначениеТипаПлатформы = Неопределено)
	
	Если ЗначениеТипаПлатформы = Неопределено Тогда
		ЗначениеТипаПлатформы = ПолучитьТипПлатформы();
	ИначеЕсли ТипЗнч("") = Тип("Строка") Тогда
		ЗначениеТипаПлатформы = ТипПлатформы[ЗначениеТипаПлатформы];	
	КонецЕсли;
	
	Если ЗначениеТипаПлатформы = ТипПлатформы.Windows_x86
		Или ЗначениеТипаПлатформы = ТипПлатформы.Windows_x86_64 Тогда
		ИмяМакета = ПолучитьИмяМакетаОбработки("EU1SArchive", ЗначениеТипаПлатформы);	
	Иначе
		ВызватьИсключение НСтр("ru = 'Для текущей ОС нет установочного файла криптографической библиотеки';
			|uk = 'Для поточної ОС немає файлу встановлення криптографічної бібліотеки'");	
	КонецЕсли;
	
	ДвоичныеДанные = ПолучитьМакетОбработки(ИмяМакета);	
	
	Результат = Новый Структура;
	Результат.Вставить("ДвоичныеДанные", ДвоичныеДанные);
	Результат.Вставить("Расширение", "zip");
	Результат.Вставить("ИмяФайла", ИмяМакета);
	Результат.Вставить("ИмяФайлаСРаширением", СтрШаблон("%1.%2", Результат.ИмяФайла, Результат.Расширение));
	
	Возврат Результат;	

КонецФункции


&НаКлиенте
Функция РежимВыполненияКомандыНаКлиенте()

	Возврат РежимРаботы;	

КонецФункции

&НаКлиенте
Функция РежимВыполненияКомандыНаСервере()

	Возврат Не РежимРаботы;	

КонецФункции


#Область РаботаСФайламиКаталогами

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьПолноеИмяФайла(Знач Каталог, Знач ИмяФайлаСРасширением)
	
	Возврат EUSignКлиентСервер.СформироватьПолноеИмяФайла(Каталог, ИмяФайлаСРасширением);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьСоздатьКаталог(Знач Путь, Знач ОчиститьКаталог = Истина)

	КаталогИнфо = Новый Файл(Путь);
	Если Не КаталогИнфо.Существует() Тогда
		СоздатьКаталог(Путь);
		Возврат;
	КонецЕсли;

	Если ОчиститьКаталог Тогда
		УдалитьФайлы(Путь, "*.*");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСОформлениемФормы

&НаКлиенте
Процедура УстановитьОформлениеЭлементаГруппаПроверятьСписокОтозванныхСертификатовДетально()

	Элементы.ГруппаПроверятьСписокОтозванныхСертификатовДетально.Доступность = ПроверятьСписокОтозванныхСертификатов;	

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОформлениеЭлементаПроверятьСписокОтозванныхСертификатовПолныйИЧастичный()

	Элементы.ПроверятьСписокОтозванныхСертификатовПолныйИЧастичный.Доступность = АвтоматическиЗагружатьСписокОтозванныхСертификатов;	

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОформлениеЭлементаГруппаProxyНастройки()

	Элементы.ГруппаProxyНастройки.Доступность = ProxyИспользовать;	

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОформлениеЭлементаГруппаProxyАвторизация()

	Элементы.ГруппаProxyАвторизация.Доступность = Не ProxyАнонимный;	

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОформлениеЭлементаГруппаTSPНастройки()

	Элементы.ГруппаTSPНастройки.Доступность = TSPИспользовать;	

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОформлениеЭлементаГруппаOCSPНастройки()

	Элементы.ГруппаOCSPНастройки.Доступность = OCSPИспользовать;	

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОформлениеЭлементаГруппаLDAPНастройки()

	Элементы.ГруппаLDAPНастройки.Доступность = LDAPИспользовать;	

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОформлениеЭлементаГруппаLDAPАвторизация()

	Элементы.ГруппаLDAPАвторизация.Доступность = Не LDAPАнонимный;	

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОформлениеЭлементаГруппаCMPНастройки()

	Элементы.ГруппаCMPНастройки.Доступность = CMPИспользовать;	

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОформлениеЭлементаКомандаИнтерфейсНастроек()

	Элементы.КомандаИнтерфейсНастроек.Доступность = РежимРаботы;	

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОформлениеЭлементаВключатьСертификатПодписантаВоВнутреннююПодпись()

	Элементы.ВключатьСертификатПодписантаВоВнутреннююПодпись.Доступность = Не ФорматПодписи;	

КонецПроцедуры

#КонецОбласти

#Область РаботаСОшибками

// Формирует и выводит сообщение, которое может быть связано с элементом 
// управления формы.
//
//  Параметры
//  ТекстСообщенияПользователю - Строка - текст сообщения.
//  КлючДанных                 - ЛюбаяСсылка - на объект информационной базы.
//                               Ссылка на объект информационной базы, к которому это сообщение относится,
//                               или ключ записи.
//  Поле                       - Строка - наименование реквизита формы.
//  ПутьКДанным                - Строка - путь к данным (путь к реквизиту формы).
//  Отказ                      - Булево - Выходной параметр.
//                               Всегда устанавливается в значение Истина.
//
//	Пример:
//
//	1. Для вывода сообщения у поля управляемой формы, связанного с реквизитом объекта:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru='Сообщение об ошибке.'"), ,
//		"ПолеВРеквизитеФормыОбъект",
//		"Объект");
//
//	Альтернативный вариант использования в форме объекта:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru='Сообщение об ошибке.'"), ,
//		"Объект.ПолеВРеквизитеФормыОбъект");
//
//	2. Для вывода сообщения рядом с полем управляемой формы, связанным с реквизитом формы:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru='Сообщение об ошибке.'"), ,
//		"ИмяРеквизитаФормы");
//
//	3. Для вывода сообщения связанного с объектом информационной базы.
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru='Сообщение об ошибке.'"), ОбъектИнформационнойБазы, "Ответственный",,Отказ);
//
// 4. Для вывода сообщения по ссылке на объект информационной базы.
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru='Сообщение об ошибке.'"), Ссылка, , , Отказ);
//
// Случаи некорректного использования:
//  1. Передача одновременно параметров КлючДанных и ПутьКДанным.
//  2. Передача в параметре КлючДанных значения типа отличного от допустимых.
//  3. Установка ссылки без установки поля (и/или пути к данным).
//
Процедура СообщитьПользователю(
		Знач ТекстСообщенияПользователю,
		Знач КлючДанных = Неопределено,
		Знач Поле = "",
		Знач ПутьКДанным = "",
		Отказ = Ложь) Экспорт
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщенияПользователю;
	Сообщение.Поле = Поле;
	
	ЭтоОбъект = Ложь;
	
#Если НЕ ТонкийКлиент И НЕ ВебКлиент Тогда
	Если КлючДанных <> Неопределено
	   И XMLТипЗнч(КлючДанных) <> Неопределено Тогда
		ТипЗначенияСтрокой = XMLТипЗнч(КлючДанных).ИмяТипа;
		ЭтоОбъект = СтрНайти(ТипЗначенияСтрокой, "Object.") > 0;
	КонецЕсли;
#КонецЕсли
	
	Если ЭтоОбъект Тогда
		Сообщение.УстановитьДанные(КлючДанных);
	Иначе
		Сообщение.КлючДанных = КлючДанных;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПутьКДанным) Тогда
		Сообщение.ПутьКДанным = ПутьКДанным;
	КонецЕсли;
		
	Сообщение.Сообщить();
	
	Отказ = Истина;
	
КонецПроцедуры

// Формирует текст ошибок заполнения полей и списков.
//
// Параметры:
//  ВидПоля       - Строка - может принимать значения:
//                  Поле, Колонка, Список;
//  ВидСообщения  - Строка - может принимать значения:
//                  Заполнение, Корректность;
//  ИмяПоля        - Строка - имя поля;
//  НомерСтроки    - Строка, Число - номер строки;
//  ИмяСписка      - Строка - имя списка;
//  ТекстСообщения - Строка - детальная расшифровка ошибки заполнения.
//
// Возвращаемое значение:
//   Строка - текст ошибки заполнения.
//
Функция ТекстОшибкиЗаполнения(ВидПоля = "Поле", ВидСообщения = "Заполнение",
	ИмяПоля = "", НомерСтроки = "", ИмяСписка = "", ТекстСообщения = "") Экспорт

	Если ВРег(ВидПоля) = "ПОЛЕ" Тогда
		Если ВРег(ВидСообщения) = "ЗАПОЛНЕНИЕ" Тогда
			Шаблон = НСтр("ru='Поле ""%1"" не заполнено';uk='Поле ""%1"" не заповнене'");
		ИначеЕсли ВРег(ВидСообщения) = "КОРРЕКТНОСТЬ" Тогда
			Шаблон = НСтр("ru='Поле ""%1"" заполнено некорректно.
                                |%4'
                                |;uk='Поле ""%1"" заповнено некоректно.
                                |%4'");
		КонецЕсли;
	ИначеЕсли ВРег(ВидПоля) = "КОЛОНКА" Тогда
		Если ВРег(ВидСообщения) = "ЗАПОЛНЕНИЕ" Тогда
			Шаблон = НСтр("ru='Не заполнена колонка ""%1"" в строке %2 списка ""%3""';uk='Не заповнена колонка ""%1"" у рядку %2 списку ""%3""'");
		ИначеЕсли ВРег(ВидСообщения) = "КОРРЕКТНОСТЬ" Тогда
			Шаблон = НСтр("ru='Некорректно заполнена колонка ""%1"" в строке %2 списка ""%3"".
                                |%4'
                                |;uk='Некоректно заповнена колонка ""%1"" в рядку %2 списку ""%3"".
                                |%4'");
		КонецЕсли;
	ИначеЕсли ВРег(ВидПоля) = "СПИСОК" Тогда
		Если ВРег(ВидСообщения) = "ЗАПОЛНЕНИЕ" Тогда
			Шаблон = НСтр("ru='Не введено ни одной строки в список ""%3""';uk='Не введено жодного рядка в список ""%3""'");
		ИначеЕсли ВРег(ВидСообщения) = "КОРРЕКТНОСТЬ" Тогда
			Шаблон = НСтр("ru='Некорректно заполнен список ""%3"".
                                |%4'
                                |;uk='Некоректно заповнений список ""%3"".
                                |%4'");
		КонецЕсли;
	КонецЕсли;

	Возврат ПодставитьПараметрыВСтроку(Шаблон, ИмяПоля, НомерСтроки, ИмяСписка, ТекстСообщения);

КонецФункции

// Подставляет параметры в строку. Максимально возможное число параметров - 9.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  СтрокаПодстановки  - Строка - шаблон строки с параметрами (вхождениями вида "%ИмяПараметра");
//  Параметр<n>        - Строка - подставляемый параметр.
//
// Возвращаемое значение:
//  Строка   - текстовая строка с подставленными параметрами.
//
// Пример:
//  ПодставитьПараметрыВСтроку(НСтр("ru='%1 пошел в %2'"), "Вася", "Зоопарк") = "Вася пошел в Зоопарк".
//
// Примечание:
//  В случаях, когда число используемых параметров в строке совпадает с числом переданных для подстановки параметров,
//  рекомендуется использовать функцию платформы СтрШаблон.
Функция ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	ИспользоватьАльтернативныйАлгоритм = 
		СтрНайти(Параметр1, "%")
		Или СтрНайти(Параметр2, "%")
		Или СтрНайти(Параметр3, "%")
		Или СтрНайти(Параметр4, "%")
		Или СтрНайти(Параметр5, "%")
		Или СтрНайти(Параметр6, "%")
		Или СтрНайти(Параметр7, "%")
		Или СтрНайти(Параметр8, "%")
		Или СтрНайти(Параметр9, "%");
		
	Если ИспользоватьАльтернативныйАлгоритм Тогда
		СтрокаПодстановки = ПодставитьПараметрыВСтрокуАльтернативныйАлгоритм(СтрокаПодстановки, Параметр1,
			Параметр2, Параметр3, Параметр4, Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	Иначе
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%2", Параметр2);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%3", Параметр3);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%4", Параметр4);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%5", Параметр5);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%6", Параметр6);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%7", Параметр7);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%8", Параметр8);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%9", Параметр9);
	КонецЕсли;
	
	Возврат СтрокаПодстановки;
КонецФункции

// Вставляет параметры в строку, учитывая, что в параметрах могут использоваться подстановочные слова %1, %2 и т.д.
Функция ПодставитьПараметрыВСтрокуАльтернативныйАлгоритм(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено)
	
	Результат = "";
	Позиция = СтрНайти(СтрокаПодстановки, "%");
	Пока Позиция > 0 Цикл 
		Результат = Результат + Лев(СтрокаПодстановки, Позиция - 1);
		СимволПослеПроцента = Сред(СтрокаПодстановки, Позиция + 1, 1);
		ПодставляемыйПараметр = "";
		Если СимволПослеПроцента = "1" Тогда
			ПодставляемыйПараметр =  Параметр1;
		ИначеЕсли СимволПослеПроцента = "2" Тогда
			ПодставляемыйПараметр =  Параметр2;
		ИначеЕсли СимволПослеПроцента = "3" Тогда
			ПодставляемыйПараметр =  Параметр3;
		ИначеЕсли СимволПослеПроцента = "4" Тогда
			ПодставляемыйПараметр =  Параметр4;
		ИначеЕсли СимволПослеПроцента = "5" Тогда
			ПодставляемыйПараметр =  Параметр5;
		ИначеЕсли СимволПослеПроцента = "6" Тогда
			ПодставляемыйПараметр =  Параметр6;
		ИначеЕсли СимволПослеПроцента = "7" Тогда
			ПодставляемыйПараметр =  Параметр7
		ИначеЕсли СимволПослеПроцента = "8" Тогда
			ПодставляемыйПараметр =  Параметр8;
		ИначеЕсли СимволПослеПроцента = "9" Тогда
			ПодставляемыйПараметр =  Параметр9;
		КонецЕсли;
		Если ПодставляемыйПараметр = "" Тогда
			Результат = Результат + "%";
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 1);
		Иначе
			Результат = Результат + ПодставляемыйПараметр;
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 2);
		КонецЕсли;
		Позиция = СтрНайти(СтрокаПодстановки, "%");
	КонецЦикла;
	Результат = Результат + СтрокаПодстановки;
	
	Возврат Результат;
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура ПоместитьСтруктуруВТаблицу(Таблица, Знач Структура, Знач Префикс = "")

	Для Каждого КлючИЗначение Из Структура Цикл
		Если ТипЗнч(КлючИЗначение.Значение) = Тип("Структура") Тогда
			ПоместитьСтруктуруВТаблицу(Таблица, КлючИЗначение.Значение, КлючИЗначение.Ключ);
		Иначе
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.Ключ = ?(ЗначениеЗаполнено(Префикс),
				СтрШаблон("%1.%2", Префикс, КлючИЗначение.Ключ),
				КлючИЗначение.Ключ);
			НоваяСтрока.Значение = КлючИЗначение.Значение;
		КонецЕсли;
	КонецЦикла;	

КонецПроцедуры

#КонецОбласти

#Область Инициализация

&НаСервере
Процедура ЗаполнитьРеквизитТипПодписи()

	Элементы.ТипПодписи.СписокВыбора.Очистить();
	
	Для Каждого КлючИЗначение Из EUSignКлиентСерверПовтИсп.ТипПодписи() Цикл
		Элементы.ТипПодписи.СписокВыбора.Добавить(КлючИЗначение.Ключ, КлючИЗначение.Значение.Представление);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитРежимВзаимодействияАЦСК()

	Элементы.РежимВзаимодействияАЦСК.СписокВыбора.Очистить();
	
	Для Каждого КлючИЗначение Из EUSignКлиентСерверПовтИсп.РежимВзаимодействияАЦСК() Цикл
		Элементы.РежимВзаимодействияАЦСК.СписокВыбора.Добавить(КлючИЗначение.Ключ, КлючИЗначение.Значение.Представление);
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗначенияПоУмолчанию()

	Результат = Новый Структура;
	Результат.Вставить("РежимРаботы", Истина);
	Результат.Вставить("КаталогБиблиотеки", "C:\EUSign\DLL");
	
	// Хранилище
	Для Каждого КлючИЗначение Из EUSignКлиентСервер.ОписаниеПараметровФайловогоХранилища() Цикл
		Результат.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	Результат.Вставить("РежимВзаимодействияАЦСК", Истина);
	
	//// Proxy
	//Для Каждого КлючИЗначение Из EUSignКлиентСервер.ОписаниеПараметровProxy() Цикл
	//	Результат.Вставить("Proxy" + КлючИЗначение.Ключ, КлючИЗначение.Значение);
	//КонецЦикла;
	//
	//// TSP
	//Для Каждого КлючИЗначение Из EUSignКлиентСервер.ОписаниеПараметровTSP() Цикл
	//	Результат.Вставить("TSP" + КлючИЗначение.Ключ, КлючИЗначение.Значение);
	//КонецЦикла;
	//
	//// OCSP
	//Для Каждого КлючИЗначение Из EUSignКлиентСервер.ОписаниеПараметровOCSP() Цикл
	//	Результат.Вставить("OCSP" + КлючИЗначение.Ключ, КлючИЗначение.Значение);
	//КонецЦикла;
	//
	//// LDAP
	//Для Каждого КлючИЗначение Из EUSignКлиентСервер.ОписаниеПараметровLDAP() Цикл
	//	Результат.Вставить("LDAP" + КлючИЗначение.Ключ, КлючИЗначение.Значение);
	//КонецЦикла;
	//
	//// CMP
	//Для Каждого КлючИЗначение Из EUSignКлиентСервер.ОписаниеПараметровCMP() Цикл
	//	Результат.Вставить("CMP" + КлючИЗначение.Ключ, КлючИЗначение.Значение);
	//КонецЦикла;
	
	// Тестирование подписи
	Результат.Вставить("ТипПодписи", "CADES_BES");
	Результат.Вставить("ФорматПодписи", Ложь);
	Результат.Вставить("ВключатьСертификатПодписантаВоВнутреннююПодпись", Истина);
	
	Результат.Вставить("ФайлКлюча", "C:\EUSign\Keys\pb_3326005132.jks");
	Результат.Вставить("ПарольКлюча", "in23va01ka012ZH");
	
	Результат.Вставить("ФайлКлючаДляПодписи", "C:\EUSign\Keys\pb_3326005132.jks");
	Результат.Вставить("ПарольКлючаДляПодписи", "in23va01ka012ZH");
	Результат.Вставить("ФайлНаПодпись", "C:\EUSign\Data\sample.pdf");
	
	Результат.Вставить("ФайлКлючаДляШифрования", "C:\EUSign\Keys\pb_3326005132.jks");
	Результат.Вставить("ПарольКлючаДляШифрования", "in23va01ka012ZH");
	
	Возврат Результат;

КонецФункции

&НаСервере
Процедура ИнициализироватьЗначенияПоУмолчанию()

	ЗаполнитьТаблицуНастроекВсехАЦСК();
	Для Каждого Строка Из ТаблицаНастроекАЦСК Цикл
		Если ВРег(Строка.Идентификатор) = "ACSKIDD.GOV.UA" Тогда
			Строка.Пометка = Истина;
			ЗаполнитьНастройкиПоТекущемуАЦСК();
			Прервать;	
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьРеквизитРежимВзаимодействияАЦСК();
	ЗаполнитьРеквизитТипПодписи();
	ЗаполнитьЗначенияСвойств(ЭтаФорма, ЗначенияПоУмолчанию());

КонецПроцедуры

#КонецОбласти